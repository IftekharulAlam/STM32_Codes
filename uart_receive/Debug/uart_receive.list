
uart_receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e60  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003024  08003024  00013024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003048  08003048  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003050  08003050  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003050  08003050  00013050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08003064  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003064  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000919f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a8  00000000  00000000  000291db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  0002a988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  0002b0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202e8  00000000  00000000  0002b740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097c9  00000000  00000000  0004ba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c45cf  00000000  00000000  000551f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001197c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c1c  00000000  00000000  00119810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800300c 	.word	0x0800300c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800300c 	.word	0x0800300c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fa66 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f826 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8dc 	bl	80006d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 f8ba 	bl	8000690 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f88e 	bl	800063c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, 12);
 8000520:	220c      	movs	r2, #12
 8000522:	490c      	ldr	r1, [pc, #48]	; (8000554 <main+0x4c>)
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <main+0x50>)
 8000526:	f001 ffe6 	bl	80024f6 <HAL_UART_Receive_DMA>
	  HAL_Delay(1000);
 800052a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052e:	f000 fac7 	bl	8000ac0 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, UART2_rxBuffer, 12,HAL_MAX_DELAY);
 8000532:	f04f 33ff 	mov.w	r3, #4294967295
 8000536:	220c      	movs	r2, #12
 8000538:	4906      	ldr	r1, [pc, #24]	; (8000554 <main+0x4c>)
 800053a:	4807      	ldr	r0, [pc, #28]	; (8000558 <main+0x50>)
 800053c:	f001 ff49 	bl	80023d2 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000544:	f000 fabc 	bl	8000ac0 <HAL_Delay>
	  UART2_rxBuffer[12] ="\n";
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <main+0x54>)
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <main+0x4c>)
 800054e:	731a      	strb	r2, [r3, #12]
	  HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, 12);
 8000550:	e7e6      	b.n	8000520 <main+0x18>
 8000552:	bf00      	nop
 8000554:	20000028 	.word	0x20000028
 8000558:	20000034 	.word	0x20000034
 800055c:	08003024 	.word	0x08003024

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2234      	movs	r2, #52	; 0x34
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fd44 	bl	8002ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <SystemClock_Config+0xd4>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a29      	ldr	r2, [pc, #164]	; (8000634 <SystemClock_Config+0xd4>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b27      	ldr	r3, [pc, #156]	; (8000634 <SystemClock_Config+0xd4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4b24      	ldr	r3, [pc, #144]	; (8000638 <SystemClock_Config+0xd8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ac:	4a22      	ldr	r2, [pc, #136]	; (8000638 <SystemClock_Config+0xd8>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <SystemClock_Config+0xd8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005d4:	2310      	movs	r3, #16
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005de:	2304      	movs	r3, #4
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fc04 	bl	8001dfc <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005fa:	f000 f8d7 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2102      	movs	r1, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f001 f8a4 	bl	8001768 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000626:	f000 f8c1 	bl	80007ac <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	; 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000642:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_USART2_UART_Init+0x50>)
 8000644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000674:	f001 fe60 	bl	8002338 <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800067e:	f000 f895 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000034 	.word	0x20000034
 800068c:	40004400 	.word	0x40004400

08000690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_DMA_Init+0x3c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <MX_DMA_Init+0x3c>)
 80006a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_DMA_Init+0x3c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	2010      	movs	r0, #16
 80006b8:	f000 fb01 	bl	8000cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006bc:	2010      	movs	r0, #16
 80006be:	f000 fb1a 	bl	8000cf6 <HAL_NVIC_EnableIRQ>

}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2c      	ldr	r2, [pc, #176]	; (80007a0 <MX_GPIO_Init+0xd0>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a25      	ldr	r2, [pc, #148]	; (80007a0 <MX_GPIO_Init+0xd0>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a1e      	ldr	r2, [pc, #120]	; (80007a0 <MX_GPIO_Init+0xd0>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <MX_GPIO_Init+0xd0>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2120      	movs	r1, #32
 800075a:	4812      	ldr	r0, [pc, #72]	; (80007a4 <MX_GPIO_Init+0xd4>)
 800075c:	f000 ffea 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000766:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	480c      	ldr	r0, [pc, #48]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000778:	f000 fe48 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800077c:	2320      	movs	r3, #32
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000794:	f000 fe3a 	bl	800140c <HAL_GPIO_Init>

}
 8000798:	bf00      	nop
 800079a:	3728      	adds	r7, #40	; 0x28
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020000 	.word	0x40020000
 80007a8:	40020800 	.word	0x40020800

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <HAL_MspInit+0x4c>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_MspInit+0x4c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007f6:	2007      	movs	r0, #7
 80007f8:	f000 fa56 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800

08000808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a30      	ldr	r2, [pc, #192]	; (80008e8 <HAL_UART_MspInit+0xe0>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d159      	bne.n	80008de <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <HAL_UART_MspInit+0xe4>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <HAL_UART_MspInit+0xe4>)
 8000834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <HAL_UART_MspInit+0xe4>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b28      	ldr	r3, [pc, #160]	; (80008ec <HAL_UART_MspInit+0xe4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a27      	ldr	r2, [pc, #156]	; (80008ec <HAL_UART_MspInit+0xe4>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b25      	ldr	r3, [pc, #148]	; (80008ec <HAL_UART_MspInit+0xe4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000862:	230c      	movs	r3, #12
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000872:	2307      	movs	r3, #7
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	481c      	ldr	r0, [pc, #112]	; (80008f0 <HAL_UART_MspInit+0xe8>)
 800087e:	f000 fdc5 	bl	800140c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <HAL_UART_MspInit+0xec>)
 8000884:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <HAL_UART_MspInit+0xf0>)
 8000886:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <HAL_UART_MspInit+0xec>)
 800088a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800088e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_UART_MspInit+0xec>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_UART_MspInit+0xec>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_UART_MspInit+0xec>)
 800089e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <HAL_UART_MspInit+0xec>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_UART_MspInit+0xec>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_UART_MspInit+0xec>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_UART_MspInit+0xec>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_UART_MspInit+0xec>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008c2:	480c      	ldr	r0, [pc, #48]	; (80008f4 <HAL_UART_MspInit+0xec>)
 80008c4:	f000 fa32 	bl	8000d2c <HAL_DMA_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80008ce:	f7ff ff6d 	bl	80007ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_UART_MspInit+0xec>)
 80008d6:	639a      	str	r2, [r3, #56]	; 0x38
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <HAL_UART_MspInit+0xec>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40004400 	.word	0x40004400
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000
 80008f4:	20000078 	.word	0x20000078
 80008f8:	40026088 	.word	0x40026088

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 f89a 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <DMA1_Stream5_IRQHandler+0x10>)
 8000956:	f000 faef 	bl	8000f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000078 	.word	0x20000078

08000964 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SystemInit+0x20>)
 800096a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <SystemInit+0x20>)
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800098e:	490e      	ldr	r1, [pc, #56]	; (80009c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a4:	4c0b      	ldr	r4, [pc, #44]	; (80009d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009b2:	f7ff ffd7 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b6:	f002 fafd 	bl	8002fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ba:	f7ff fda5 	bl	8000508 <main>
  bx  lr    
 80009be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009cc:	08003058 	.word	0x08003058
  ldr r2, =_sbss
 80009d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d4:	200000dc 	.word	0x200000dc

080009d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC_IRQHandler>
	...

080009dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <HAL_Init+0x40>)
 80009e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_Init+0x40>)
 80009f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_Init+0x40>)
 80009fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f94f 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f000 f808 	bl	8000a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a10:	f7ff fed2 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023c00 	.word	0x40023c00

08000a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x54>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x58>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f967 	bl	8000d12 <HAL_SYSTICK_Config>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00e      	b.n	8000a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d80a      	bhi.n	8000a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f000 f92f 	bl	8000cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <HAL_InitTick+0x5c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	200000d8 	.word	0x200000d8

08000aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	200000d8 	.word	0x200000d8

08000ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac8:	f7ff ffee 	bl	8000aa8 <HAL_GetTick>
 8000acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad8:	d005      	beq.n	8000ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_Delay+0x44>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ae6:	bf00      	nop
 8000ae8:	f7ff ffde 	bl	8000aa8 <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d8f7      	bhi.n	8000ae8 <HAL_Delay+0x28>
  {
  }
}
 8000af8:	bf00      	nop
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000008 	.word	0x20000008

08000b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	60d3      	str	r3, [r2, #12]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db0b      	blt.n	8000b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	f003 021f 	and.w	r2, r3, #31
 8000b84:	4907      	ldr	r1, [pc, #28]	; (8000ba4 <__NVIC_EnableIRQ+0x38>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e100 	.word	0xe000e100

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c74:	d301      	bcc.n	8000c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00f      	b.n	8000c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <SysTick_Config+0x40>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c82:	210f      	movs	r1, #15
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f7ff ff8e 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <SysTick_Config+0x40>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SysTick_Config+0x40>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff29 	bl	8000b08 <__NVIC_SetPriorityGrouping>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd0:	f7ff ff3e 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	6978      	ldr	r0, [r7, #20]
 8000cdc:	f7ff ff8e 	bl	8000bfc <NVIC_EncodePriority>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff5d 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff31 	bl	8000b6c <__NVIC_EnableIRQ>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ffa2 	bl	8000c64 <SysTick_Config>
 8000d20:	4603      	mov	r3, r0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff feb6 	bl	8000aa8 <HAL_GetTick>
 8000d3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e099      	b.n	8000e7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0201 	bic.w	r2, r2, #1
 8000d66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d68:	e00f      	b.n	8000d8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d6a:	f7ff fe9d 	bl	8000aa8 <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b05      	cmp	r3, #5
 8000d76:	d908      	bls.n	8000d8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2220      	movs	r2, #32
 8000d7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2203      	movs	r2, #3
 8000d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e078      	b.n	8000e7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1e8      	bne.n	8000d6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <HAL_DMA_Init+0x158>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a1b      	ldr	r3, [r3, #32]
 8000dd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d107      	bne.n	8000df4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	4313      	orrs	r3, r2
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f023 0307 	bic.w	r3, r3, #7
 8000e0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	d117      	bne.n	8000e4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d00e      	beq.n	8000e4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 fa6f 	bl	8001314 <DMA_CheckFifoParam>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d008      	beq.n	8000e4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2240      	movs	r2, #64	; 0x40
 8000e40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2201      	movs	r2, #1
 8000e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e016      	b.n	8000e7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f000 fa26 	bl	80012a8 <DMA_CalcBaseAndBitshift>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e64:	223f      	movs	r2, #63	; 0x3f
 8000e66:	409a      	lsls	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	f010803f 	.word	0xf010803f

08000e88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d101      	bne.n	8000eae <HAL_DMA_Start_IT+0x26>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e040      	b.n	8000f30 <HAL_DMA_Start_IT+0xa8>
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d12f      	bne.n	8000f22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f000 f9b8 	bl	800124c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ee0:	223f      	movs	r2, #63	; 0x3f
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0216 	orr.w	r2, r2, #22
 8000ef6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d007      	beq.n	8000f10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f042 0208 	orr.w	r2, r2, #8
 8000f0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f042 0201 	orr.w	r2, r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	e005      	b.n	8000f2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f44:	4b8e      	ldr	r3, [pc, #568]	; (8001180 <HAL_DMA_IRQHandler+0x248>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a8e      	ldr	r2, [pc, #568]	; (8001184 <HAL_DMA_IRQHandler+0x24c>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	0a9b      	lsrs	r3, r3, #10
 8000f50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f62:	2208      	movs	r2, #8
 8000f64:	409a      	lsls	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d01a      	beq.n	8000fa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d013      	beq.n	8000fa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0204 	bic.w	r2, r2, #4
 8000f8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f90:	2208      	movs	r2, #8
 8000f92:	409a      	lsls	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f9c:	f043 0201 	orr.w	r2, r3, #1
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fa8:	2201      	movs	r2, #1
 8000faa:	409a      	lsls	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d012      	beq.n	8000fda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00b      	beq.n	8000fda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd2:	f043 0202 	orr.w	r2, r3, #2
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fde:	2204      	movs	r2, #4
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d012      	beq.n	8001010 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00b      	beq.n	8001010 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	409a      	lsls	r2, r3
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001008:	f043 0204 	orr.w	r2, r3, #4
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001014:	2210      	movs	r2, #16
 8001016:	409a      	lsls	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4013      	ands	r3, r2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d043      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	2b00      	cmp	r3, #0
 800102c:	d03c      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001032:	2210      	movs	r2, #16
 8001034:	409a      	lsls	r2, r3
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d018      	beq.n	800107a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d108      	bne.n	8001068 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	2b00      	cmp	r3, #0
 800105c:	d024      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	4798      	blx	r3
 8001066:	e01f      	b.n	80010a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800106c:	2b00      	cmp	r3, #0
 800106e:	d01b      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	4798      	blx	r3
 8001078:	e016      	b.n	80010a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001084:	2b00      	cmp	r3, #0
 8001086:	d107      	bne.n	8001098 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0208 	bic.w	r2, r2, #8
 8001096:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ac:	2220      	movs	r2, #32
 80010ae:	409a      	lsls	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 808f 	beq.w	80011d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 8087 	beq.w	80011d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ce:	2220      	movs	r2, #32
 80010d0:	409a      	lsls	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b05      	cmp	r3, #5
 80010e0:	d136      	bne.n	8001150 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0216 	bic.w	r2, r2, #22
 80010f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001100:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	2b00      	cmp	r3, #0
 8001108:	d103      	bne.n	8001112 <HAL_DMA_IRQHandler+0x1da>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0208 	bic.w	r2, r2, #8
 8001120:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001126:	223f      	movs	r2, #63	; 0x3f
 8001128:	409a      	lsls	r2, r3
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001142:	2b00      	cmp	r3, #0
 8001144:	d07e      	beq.n	8001244 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	4798      	blx	r3
        }
        return;
 800114e:	e079      	b.n	8001244 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d01d      	beq.n	800119a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10d      	bne.n	8001188 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	2b00      	cmp	r3, #0
 8001172:	d031      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	4798      	blx	r3
 800117c:	e02c      	b.n	80011d8 <HAL_DMA_IRQHandler+0x2a0>
 800117e:	bf00      	nop
 8001180:	20000000 	.word	0x20000000
 8001184:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118c:	2b00      	cmp	r3, #0
 800118e:	d023      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	4798      	blx	r3
 8001198:	e01e      	b.n	80011d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10f      	bne.n	80011c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0210 	bic.w	r2, r2, #16
 80011b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d032      	beq.n	8001246 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d022      	beq.n	8001232 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2205      	movs	r2, #5
 80011f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0201 	bic.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	3301      	adds	r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	429a      	cmp	r2, r3
 800120e:	d307      	bcc.n	8001220 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f2      	bne.n	8001204 <HAL_DMA_IRQHandler+0x2cc>
 800121e:	e000      	b.n	8001222 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001220:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	4798      	blx	r3
 8001242:	e000      	b.n	8001246 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001244:	bf00      	nop
    }
  }
}
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001268:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b40      	cmp	r3, #64	; 0x40
 8001278:	d108      	bne.n	800128c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800128a:	e007      	b.n	800129c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	60da      	str	r2, [r3, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	3b10      	subs	r3, #16
 80012b8:	4a14      	ldr	r2, [pc, #80]	; (800130c <DMA_CalcBaseAndBitshift+0x64>)
 80012ba:	fba2 2303 	umull	r2, r3, r2, r3
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012c2:	4a13      	ldr	r2, [pc, #76]	; (8001310 <DMA_CalcBaseAndBitshift+0x68>)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d909      	bls.n	80012ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012de:	f023 0303 	bic.w	r3, r3, #3
 80012e2:	1d1a      	adds	r2, r3, #4
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	659a      	str	r2, [r3, #88]	; 0x58
 80012e8:	e007      	b.n	80012fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012f2:	f023 0303 	bic.w	r3, r3, #3
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	aaaaaaab 	.word	0xaaaaaaab
 8001310:	08003040 	.word	0x08003040

08001314 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d11f      	bne.n	800136e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	2b03      	cmp	r3, #3
 8001332:	d856      	bhi.n	80013e2 <DMA_CheckFifoParam+0xce>
 8001334:	a201      	add	r2, pc, #4	; (adr r2, 800133c <DMA_CheckFifoParam+0x28>)
 8001336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133a:	bf00      	nop
 800133c:	0800134d 	.word	0x0800134d
 8001340:	0800135f 	.word	0x0800135f
 8001344:	0800134d 	.word	0x0800134d
 8001348:	080013e3 	.word	0x080013e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d046      	beq.n	80013e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800135c:	e043      	b.n	80013e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001366:	d140      	bne.n	80013ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800136c:	e03d      	b.n	80013ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001376:	d121      	bne.n	80013bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b03      	cmp	r3, #3
 800137c:	d837      	bhi.n	80013ee <DMA_CheckFifoParam+0xda>
 800137e:	a201      	add	r2, pc, #4	; (adr r2, 8001384 <DMA_CheckFifoParam+0x70>)
 8001380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001384:	08001395 	.word	0x08001395
 8001388:	0800139b 	.word	0x0800139b
 800138c:	08001395 	.word	0x08001395
 8001390:	080013ad 	.word	0x080013ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
      break;
 8001398:	e030      	b.n	80013fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d025      	beq.n	80013f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013aa:	e022      	b.n	80013f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013b4:	d11f      	bne.n	80013f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80013ba:	e01c      	b.n	80013f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d903      	bls.n	80013ca <DMA_CheckFifoParam+0xb6>
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d003      	beq.n	80013d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80013c8:	e018      	b.n	80013fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
      break;
 80013ce:	e015      	b.n	80013fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00e      	beq.n	80013fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
      break;
 80013e0:	e00b      	b.n	80013fa <DMA_CheckFifoParam+0xe6>
      break;
 80013e2:	bf00      	nop
 80013e4:	e00a      	b.n	80013fc <DMA_CheckFifoParam+0xe8>
      break;
 80013e6:	bf00      	nop
 80013e8:	e008      	b.n	80013fc <DMA_CheckFifoParam+0xe8>
      break;
 80013ea:	bf00      	nop
 80013ec:	e006      	b.n	80013fc <DMA_CheckFifoParam+0xe8>
      break;
 80013ee:	bf00      	nop
 80013f0:	e004      	b.n	80013fc <DMA_CheckFifoParam+0xe8>
      break;
 80013f2:	bf00      	nop
 80013f4:	e002      	b.n	80013fc <DMA_CheckFifoParam+0xe8>
      break;   
 80013f6:	bf00      	nop
 80013f8:	e000      	b.n	80013fc <DMA_CheckFifoParam+0xe8>
      break;
 80013fa:	bf00      	nop
    }
  } 
  
  return status; 
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	; 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	e165      	b.n	80016f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	429a      	cmp	r2, r3
 8001442:	f040 8154 	bne.w	80016ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d005      	beq.n	800145e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145a:	2b02      	cmp	r3, #2
 800145c:	d130      	bne.n	80014c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001494:	2201      	movs	r2, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	f003 0201 	and.w	r2, r3, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d017      	beq.n	80014fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d123      	bne.n	8001550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	08da      	lsrs	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3208      	adds	r2, #8
 8001510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	220f      	movs	r2, #15
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	08da      	lsrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	69b9      	ldr	r1, [r7, #24]
 800154c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0203 	and.w	r2, r3, #3
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80ae 	beq.w	80016ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b5d      	ldr	r3, [pc, #372]	; (800170c <HAL_GPIO_Init+0x300>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a5c      	ldr	r2, [pc, #368]	; (800170c <HAL_GPIO_Init+0x300>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b5a      	ldr	r3, [pc, #360]	; (800170c <HAL_GPIO_Init+0x300>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ae:	4a58      	ldr	r2, [pc, #352]	; (8001710 <HAL_GPIO_Init+0x304>)
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	3302      	adds	r3, #2
 80015b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	220f      	movs	r2, #15
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4f      	ldr	r2, [pc, #316]	; (8001714 <HAL_GPIO_Init+0x308>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d025      	beq.n	8001626 <HAL_GPIO_Init+0x21a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <HAL_GPIO_Init+0x30c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d01f      	beq.n	8001622 <HAL_GPIO_Init+0x216>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4d      	ldr	r2, [pc, #308]	; (800171c <HAL_GPIO_Init+0x310>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x212>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x314>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x20e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x318>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x20a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x31c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x206>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x320>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x202>
 800160a:	2306      	movs	r3, #6
 800160c:	e00c      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 800160e:	2307      	movs	r3, #7
 8001610:	e00a      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001612:	2305      	movs	r3, #5
 8001614:	e008      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001616:	2304      	movs	r3, #4
 8001618:	e006      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 800161a:	2303      	movs	r3, #3
 800161c:	e004      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 800161e:	2302      	movs	r3, #2
 8001620:	e002      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001626:	2300      	movs	r3, #0
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	f002 0203 	and.w	r2, r2, #3
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	4093      	lsls	r3, r2
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001638:	4935      	ldr	r1, [pc, #212]	; (8001710 <HAL_GPIO_Init+0x304>)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	3302      	adds	r3, #2
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001646:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_GPIO_Init+0x324>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800166a:	4a31      	ldr	r2, [pc, #196]	; (8001730 <HAL_GPIO_Init+0x324>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001670:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HAL_GPIO_Init+0x324>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001694:	4a26      	ldr	r2, [pc, #152]	; (8001730 <HAL_GPIO_Init+0x324>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800169a:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_GPIO_Init+0x324>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016be:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <HAL_GPIO_Init+0x324>)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <HAL_GPIO_Init+0x324>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e8:	4a11      	ldr	r2, [pc, #68]	; (8001730 <HAL_GPIO_Init+0x324>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3301      	adds	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	f67f ae96 	bls.w	8001428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3724      	adds	r7, #36	; 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40013800 	.word	0x40013800
 8001714:	40020000 	.word	0x40020000
 8001718:	40020400 	.word	0x40020400
 800171c:	40020800 	.word	0x40020800
 8001720:	40020c00 	.word	0x40020c00
 8001724:	40021000 	.word	0x40021000
 8001728:	40021400 	.word	0x40021400
 800172c:	40021800 	.word	0x40021800
 8001730:	40013c00 	.word	0x40013c00

08001734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001744:	787b      	ldrb	r3, [r7, #1]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001750:	e003      	b.n	800175a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	041a      	lsls	r2, r3, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	619a      	str	r2, [r3, #24]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0cc      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800177c:	4b68      	ldr	r3, [pc, #416]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d90c      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b65      	ldr	r3, [pc, #404]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0b8      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	494d      	ldr	r1, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d044      	beq.n	8001888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d119      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d003      	beq.n	8001826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	2b03      	cmp	r3, #3
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e06f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001836:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e067      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f023 0203 	bic.w	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4934      	ldr	r1, [pc, #208]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001858:	f7ff f926 	bl	8000aa8 <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	e00a      	b.n	8001876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001860:	f7ff f922 	bl	8000aa8 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e04f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 020c 	and.w	r2, r3, #12
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	429a      	cmp	r2, r3
 8001886:	d1eb      	bne.n	8001860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d20c      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e032      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4916      	ldr	r1, [pc, #88]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 f855 	bl	800199c <HAL_RCC_GetSysClockFreq>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	490a      	ldr	r1, [pc, #40]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	5ccb      	ldrb	r3, [r1, r3]
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f886 	bl	8000a20 <HAL_InitTick>

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00
 8001924:	40023800 	.word	0x40023800
 8001928:	08003028 	.word	0x08003028
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_RCC_GetHCLKFreq+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000

0800194c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001950:	f7ff fff0 	bl	8001934 <HAL_RCC_GetHCLKFreq>
 8001954:	4602      	mov	r2, r0
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	0a9b      	lsrs	r3, r3, #10
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	4903      	ldr	r1, [pc, #12]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001962:	5ccb      	ldrb	r3, [r1, r3]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	08003038 	.word	0x08003038

08001974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001978:	f7ff ffdc 	bl	8001934 <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	0b5b      	lsrs	r3, r3, #13
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4903      	ldr	r1, [pc, #12]	; (8001998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	08003038 	.word	0x08003038

0800199c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800199c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a0:	b0ae      	sub	sp, #184	; 0xb8
 80019a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c2:	4bcb      	ldr	r3, [pc, #812]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b0c      	cmp	r3, #12
 80019cc:	f200 8206 	bhi.w	8001ddc <HAL_RCC_GetSysClockFreq+0x440>
 80019d0:	a201      	add	r2, pc, #4	; (adr r2, 80019d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80019d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d6:	bf00      	nop
 80019d8:	08001a0d 	.word	0x08001a0d
 80019dc:	08001ddd 	.word	0x08001ddd
 80019e0:	08001ddd 	.word	0x08001ddd
 80019e4:	08001ddd 	.word	0x08001ddd
 80019e8:	08001a15 	.word	0x08001a15
 80019ec:	08001ddd 	.word	0x08001ddd
 80019f0:	08001ddd 	.word	0x08001ddd
 80019f4:	08001ddd 	.word	0x08001ddd
 80019f8:	08001a1d 	.word	0x08001a1d
 80019fc:	08001ddd 	.word	0x08001ddd
 8001a00:	08001ddd 	.word	0x08001ddd
 8001a04:	08001ddd 	.word	0x08001ddd
 8001a08:	08001c0d 	.word	0x08001c0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a0c:	4bb9      	ldr	r3, [pc, #740]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001a12:	e1e7      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a14:	4bb8      	ldr	r3, [pc, #736]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a1a:	e1e3      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a1c:	4bb4      	ldr	r3, [pc, #720]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a28:	4bb1      	ldr	r3, [pc, #708]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d071      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a34:	4bae      	ldr	r3, [pc, #696]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	099b      	lsrs	r3, r3, #6
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a40:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001a5a:	4622      	mov	r2, r4
 8001a5c:	462b      	mov	r3, r5
 8001a5e:	f04f 0000 	mov.w	r0, #0
 8001a62:	f04f 0100 	mov.w	r1, #0
 8001a66:	0159      	lsls	r1, r3, #5
 8001a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a6c:	0150      	lsls	r0, r2, #5
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4621      	mov	r1, r4
 8001a74:	1a51      	subs	r1, r2, r1
 8001a76:	6439      	str	r1, [r7, #64]	; 0x40
 8001a78:	4629      	mov	r1, r5
 8001a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	018b      	lsls	r3, r1, #6
 8001a90:	4641      	mov	r1, r8
 8001a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a96:	4641      	mov	r1, r8
 8001a98:	018a      	lsls	r2, r1, #6
 8001a9a:	4641      	mov	r1, r8
 8001a9c:	1a51      	subs	r1, r2, r1
 8001a9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001aa0:	4649      	mov	r1, r9
 8001aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001ab4:	4649      	mov	r1, r9
 8001ab6:	00cb      	lsls	r3, r1, #3
 8001ab8:	4641      	mov	r1, r8
 8001aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001abe:	4641      	mov	r1, r8
 8001ac0:	00ca      	lsls	r2, r1, #3
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4622      	mov	r2, r4
 8001aca:	189b      	adds	r3, r3, r2
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ace:	462b      	mov	r3, r5
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	eb42 0303 	adc.w	r3, r2, r3
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	024b      	lsls	r3, r1, #9
 8001ae8:	4621      	mov	r1, r4
 8001aea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aee:	4621      	mov	r1, r4
 8001af0:	024a      	lsls	r2, r1, #9
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001afa:	2200      	movs	r2, #0
 8001afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b04:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001b08:	f7fe fb7c 	bl	8000204 <__aeabi_uldivmod>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4613      	mov	r3, r2
 8001b12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b16:	e067      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b18:	4b75      	ldr	r3, [pc, #468]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	099b      	lsrs	r3, r3, #6
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b24:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001b28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b30:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b32:	2300      	movs	r3, #0
 8001b34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b36:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001b3a:	4622      	mov	r2, r4
 8001b3c:	462b      	mov	r3, r5
 8001b3e:	f04f 0000 	mov.w	r0, #0
 8001b42:	f04f 0100 	mov.w	r1, #0
 8001b46:	0159      	lsls	r1, r3, #5
 8001b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b4c:	0150      	lsls	r0, r2, #5
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4621      	mov	r1, r4
 8001b54:	1a51      	subs	r1, r2, r1
 8001b56:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b58:	4629      	mov	r1, r5
 8001b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b6c:	4649      	mov	r1, r9
 8001b6e:	018b      	lsls	r3, r1, #6
 8001b70:	4641      	mov	r1, r8
 8001b72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b76:	4641      	mov	r1, r8
 8001b78:	018a      	lsls	r2, r1, #6
 8001b7a:	4641      	mov	r1, r8
 8001b7c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b80:	4649      	mov	r1, r9
 8001b82:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b92:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b9a:	4692      	mov	sl, r2
 8001b9c:	469b      	mov	fp, r3
 8001b9e:	4623      	mov	r3, r4
 8001ba0:	eb1a 0303 	adds.w	r3, sl, r3
 8001ba4:	623b      	str	r3, [r7, #32]
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	eb4b 0303 	adc.w	r3, fp, r3
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001bba:	4629      	mov	r1, r5
 8001bbc:	028b      	lsls	r3, r1, #10
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	028a      	lsls	r2, r1, #10
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	673b      	str	r3, [r7, #112]	; 0x70
 8001bd4:	677a      	str	r2, [r7, #116]	; 0x74
 8001bd6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001bda:	f7fe fb13 	bl	8000204 <__aeabi_uldivmod>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4613      	mov	r3, r2
 8001be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001be8:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001bfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c0a:	e0eb      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c0c:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c18:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d06b      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c24:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c36:	663b      	str	r3, [r7, #96]	; 0x60
 8001c38:	2300      	movs	r3, #0
 8001c3a:	667b      	str	r3, [r7, #100]	; 0x64
 8001c3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c40:	4622      	mov	r2, r4
 8001c42:	462b      	mov	r3, r5
 8001c44:	f04f 0000 	mov.w	r0, #0
 8001c48:	f04f 0100 	mov.w	r1, #0
 8001c4c:	0159      	lsls	r1, r3, #5
 8001c4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c52:	0150      	lsls	r0, r2, #5
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4621      	mov	r1, r4
 8001c5a:	1a51      	subs	r1, r2, r1
 8001c5c:	61b9      	str	r1, [r7, #24]
 8001c5e:	4629      	mov	r1, r5
 8001c60:	eb63 0301 	sbc.w	r3, r3, r1
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c72:	4659      	mov	r1, fp
 8001c74:	018b      	lsls	r3, r1, #6
 8001c76:	4651      	mov	r1, sl
 8001c78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c7c:	4651      	mov	r1, sl
 8001c7e:	018a      	lsls	r2, r1, #6
 8001c80:	4651      	mov	r1, sl
 8001c82:	ebb2 0801 	subs.w	r8, r2, r1
 8001c86:	4659      	mov	r1, fp
 8001c88:	eb63 0901 	sbc.w	r9, r3, r1
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ca0:	4690      	mov	r8, r2
 8001ca2:	4699      	mov	r9, r3
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	eb18 0303 	adds.w	r3, r8, r3
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	462b      	mov	r3, r5
 8001cae:	eb49 0303 	adc.w	r3, r9, r3
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	024b      	lsls	r3, r1, #9
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cca:	4621      	mov	r1, r4
 8001ccc:	024a      	lsls	r2, r1, #9
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cda:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001cdc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ce0:	f7fe fa90 	bl	8000204 <__aeabi_uldivmod>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4613      	mov	r3, r2
 8001cea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cee:	e065      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x420>
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfc:	4b3d      	ldr	r3, [pc, #244]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	099b      	lsrs	r3, r3, #6
 8001d02:	2200      	movs	r2, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	4611      	mov	r1, r2
 8001d08:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d0c:	653b      	str	r3, [r7, #80]	; 0x50
 8001d0e:	2300      	movs	r3, #0
 8001d10:	657b      	str	r3, [r7, #84]	; 0x54
 8001d12:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001d16:	4642      	mov	r2, r8
 8001d18:	464b      	mov	r3, r9
 8001d1a:	f04f 0000 	mov.w	r0, #0
 8001d1e:	f04f 0100 	mov.w	r1, #0
 8001d22:	0159      	lsls	r1, r3, #5
 8001d24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d28:	0150      	lsls	r0, r2, #5
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4641      	mov	r1, r8
 8001d30:	1a51      	subs	r1, r2, r1
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	4649      	mov	r1, r9
 8001d36:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d48:	4659      	mov	r1, fp
 8001d4a:	018b      	lsls	r3, r1, #6
 8001d4c:	4651      	mov	r1, sl
 8001d4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d52:	4651      	mov	r1, sl
 8001d54:	018a      	lsls	r2, r1, #6
 8001d56:	4651      	mov	r1, sl
 8001d58:	1a54      	subs	r4, r2, r1
 8001d5a:	4659      	mov	r1, fp
 8001d5c:	eb63 0501 	sbc.w	r5, r3, r1
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	00eb      	lsls	r3, r5, #3
 8001d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d6e:	00e2      	lsls	r2, r4, #3
 8001d70:	4614      	mov	r4, r2
 8001d72:	461d      	mov	r5, r3
 8001d74:	4643      	mov	r3, r8
 8001d76:	18e3      	adds	r3, r4, r3
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	464b      	mov	r3, r9
 8001d7c:	eb45 0303 	adc.w	r3, r5, r3
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d8e:	4629      	mov	r1, r5
 8001d90:	028b      	lsls	r3, r1, #10
 8001d92:	4621      	mov	r1, r4
 8001d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d98:	4621      	mov	r1, r4
 8001d9a:	028a      	lsls	r2, r1, #10
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001da4:	2200      	movs	r2, #0
 8001da6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001da8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001daa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001dae:	f7fe fa29 	bl	8000204 <__aeabi_uldivmod>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4613      	mov	r3, r2
 8001db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	0f1b      	lsrs	r3, r3, #28
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001dca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001dce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dda:	e003      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001de2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001de4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	37b8      	adds	r7, #184	; 0xb8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	00f42400 	.word	0x00f42400

08001dfc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e28d      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8083 	beq.w	8001f22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e1c:	4b94      	ldr	r3, [pc, #592]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d019      	beq.n	8001e5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e28:	4b91      	ldr	r3, [pc, #580]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e34:	4b8e      	ldr	r3, [pc, #568]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e40:	d00c      	beq.n	8001e5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e42:	4b8b      	ldr	r3, [pc, #556]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d112      	bne.n	8001e74 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4e:	4b88      	ldr	r3, [pc, #544]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e5a:	d10b      	bne.n	8001e74 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5c:	4b84      	ldr	r3, [pc, #528]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d05b      	beq.n	8001f20 <HAL_RCC_OscConfig+0x124>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d157      	bne.n	8001f20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e25a      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7c:	d106      	bne.n	8001e8c <HAL_RCC_OscConfig+0x90>
 8001e7e:	4b7c      	ldr	r3, [pc, #496]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7b      	ldr	r2, [pc, #492]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e01d      	b.n	8001ec8 <HAL_RCC_OscConfig+0xcc>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xb4>
 8001e96:	4b76      	ldr	r3, [pc, #472]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a75      	ldr	r2, [pc, #468]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b73      	ldr	r3, [pc, #460]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a72      	ldr	r2, [pc, #456]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCC_OscConfig+0xcc>
 8001eb0:	4b6f      	ldr	r3, [pc, #444]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a6e      	ldr	r2, [pc, #440]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b6c      	ldr	r3, [pc, #432]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6b      	ldr	r2, [pc, #428]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d013      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7fe fdea 	bl	8000aa8 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7fe fde6 	bl	8000aa8 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e21f      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b61      	ldr	r3, [pc, #388]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0xdc>
 8001ef6:	e014      	b.n	8001f22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fdd6 	bl	8000aa8 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f00:	f7fe fdd2 	bl	8000aa8 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e20b      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	4b57      	ldr	r3, [pc, #348]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x104>
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d06f      	beq.n	800200e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f2e:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d017      	beq.n	8001f6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f3a:	4b4d      	ldr	r3, [pc, #308]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d105      	bne.n	8001f52 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f46:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00b      	beq.n	8001f6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d11c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f5e:	4b44      	ldr	r3, [pc, #272]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d116      	bne.n	8001f98 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d005      	beq.n	8001f82 <HAL_RCC_OscConfig+0x186>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e1d3      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f82:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4937      	ldr	r1, [pc, #220]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f96:	e03a      	b.n	800200e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d020      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa0:	4b34      	ldr	r3, [pc, #208]	; (8002074 <HAL_RCC_OscConfig+0x278>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7fe fd7f 	bl	8000aa8 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fae:	f7fe fd7b 	bl	8000aa8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e1b4      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fcc:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4925      	ldr	r1, [pc, #148]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	e015      	b.n	800200e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe2:	4b24      	ldr	r3, [pc, #144]	; (8002074 <HAL_RCC_OscConfig+0x278>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7fe fd5e 	bl	8000aa8 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff0:	f7fe fd5a 	bl	8000aa8 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e193      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002002:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d036      	beq.n	8002088 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d016      	beq.n	8002050 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_RCC_OscConfig+0x27c>)
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7fe fd3e 	bl	8000aa8 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002030:	f7fe fd3a 	bl	8000aa8 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e173      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8002044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x234>
 800204e:	e01b      	b.n	8002088 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCC_OscConfig+0x27c>)
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002056:	f7fe fd27 	bl	8000aa8 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	e00e      	b.n	800207c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205e:	f7fe fd23 	bl	8000aa8 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d907      	bls.n	800207c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e15c      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
 8002070:	40023800 	.word	0x40023800
 8002074:	42470000 	.word	0x42470000
 8002078:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207c:	4b8a      	ldr	r3, [pc, #552]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 800207e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1ea      	bne.n	800205e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8097 	beq.w	80021c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002096:	2300      	movs	r3, #0
 8002098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209a:	4b83      	ldr	r3, [pc, #524]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10f      	bne.n	80020c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	4b7f      	ldr	r3, [pc, #508]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a7e      	ldr	r2, [pc, #504]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b7c      	ldr	r3, [pc, #496]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c2:	2301      	movs	r3, #1
 80020c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c6:	4b79      	ldr	r3, [pc, #484]	; (80022ac <HAL_RCC_OscConfig+0x4b0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d118      	bne.n	8002104 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020d2:	4b76      	ldr	r3, [pc, #472]	; (80022ac <HAL_RCC_OscConfig+0x4b0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a75      	ldr	r2, [pc, #468]	; (80022ac <HAL_RCC_OscConfig+0x4b0>)
 80020d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020de:	f7fe fce3 	bl	8000aa8 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e6:	f7fe fcdf 	bl	8000aa8 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e118      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	4b6c      	ldr	r3, [pc, #432]	; (80022ac <HAL_RCC_OscConfig+0x4b0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x31e>
 800210c:	4b66      	ldr	r3, [pc, #408]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	4a65      	ldr	r2, [pc, #404]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6713      	str	r3, [r2, #112]	; 0x70
 8002118:	e01c      	b.n	8002154 <HAL_RCC_OscConfig+0x358>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b05      	cmp	r3, #5
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x340>
 8002122:	4b61      	ldr	r3, [pc, #388]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	4a60      	ldr	r2, [pc, #384]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	6713      	str	r3, [r2, #112]	; 0x70
 800212e:	4b5e      	ldr	r3, [pc, #376]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	4a5d      	ldr	r2, [pc, #372]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
 800213a:	e00b      	b.n	8002154 <HAL_RCC_OscConfig+0x358>
 800213c:	4b5a      	ldr	r3, [pc, #360]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	4a59      	ldr	r2, [pc, #356]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 8002142:	f023 0301 	bic.w	r3, r3, #1
 8002146:	6713      	str	r3, [r2, #112]	; 0x70
 8002148:	4b57      	ldr	r3, [pc, #348]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214c:	4a56      	ldr	r2, [pc, #344]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 800214e:	f023 0304 	bic.w	r3, r3, #4
 8002152:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d015      	beq.n	8002188 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215c:	f7fe fca4 	bl	8000aa8 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002162:	e00a      	b.n	800217a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f7fe fca0 	bl	8000aa8 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0d7      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217a:	4b4b      	ldr	r3, [pc, #300]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0ee      	beq.n	8002164 <HAL_RCC_OscConfig+0x368>
 8002186:	e014      	b.n	80021b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002188:	f7fe fc8e 	bl	8000aa8 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002190:	f7fe fc8a 	bl	8000aa8 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	; 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e0c1      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a6:	4b40      	ldr	r3, [pc, #256]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1ee      	bne.n	8002190 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d105      	bne.n	80021c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b8:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	4a3a      	ldr	r2, [pc, #232]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 80021be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80ad 	beq.w	8002328 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ce:	4b36      	ldr	r3, [pc, #216]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d060      	beq.n	800229c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d145      	bne.n	800226e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <HAL_RCC_OscConfig+0x4b4>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7fe fc5e 	bl	8000aa8 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f0:	f7fe fc5a 	bl	8000aa8 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e093      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002202:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69da      	ldr	r2, [r3, #28]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	019b      	lsls	r3, r3, #6
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	3b01      	subs	r3, #1
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	071b      	lsls	r3, r3, #28
 800223a:	491b      	ldr	r1, [pc, #108]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002240:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <HAL_RCC_OscConfig+0x4b4>)
 8002242:	2201      	movs	r2, #1
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7fe fc2f 	bl	8000aa8 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224e:	f7fe fc2b 	bl	8000aa8 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e064      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x452>
 800226c:	e05c      	b.n	8002328 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <HAL_RCC_OscConfig+0x4b4>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7fe fc18 	bl	8000aa8 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227c:	f7fe fc14 	bl	8000aa8 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e04d      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_RCC_OscConfig+0x4ac>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x480>
 800229a:	e045      	b.n	8002328 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e040      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40007000 	.word	0x40007000
 80022b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <HAL_RCC_OscConfig+0x538>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d030      	beq.n	8002324 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d129      	bne.n	8002324 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d122      	bne.n	8002324 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022e4:	4013      	ands	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d119      	bne.n	8002324 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	085b      	lsrs	r3, r3, #1
 80022fc:	3b01      	subs	r3, #1
 80022fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d10f      	bne.n	8002324 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002310:	429a      	cmp	r2, r3
 8002312:	d107      	bne.n	8002324 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800

08002338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e03f      	b.n	80023ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fa52 	bl	8000808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2224      	movs	r2, #36	; 0x24
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800237a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fba5 	bl	8002acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b08a      	sub	sp, #40	; 0x28
 80023d6:	af02      	add	r7, sp, #8
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4613      	mov	r3, r2
 80023e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	d17c      	bne.n	80024ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_UART_Transmit+0x2c>
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e075      	b.n	80024ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_UART_Transmit+0x3e>
 800240c:	2302      	movs	r3, #2
 800240e:	e06e      	b.n	80024ee <HAL_UART_Transmit+0x11c>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2221      	movs	r2, #33	; 0x21
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002426:	f7fe fb3f 	bl	8000aa8 <HAL_GetTick>
 800242a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	88fa      	ldrh	r2, [r7, #6]
 8002430:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002440:	d108      	bne.n	8002454 <HAL_UART_Transmit+0x82>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d104      	bne.n	8002454 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	e003      	b.n	800245c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002464:	e02a      	b.n	80024bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2200      	movs	r2, #0
 800246e:	2180      	movs	r1, #128	; 0x80
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f992 	bl	800279a <UART_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e036      	b.n	80024ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10b      	bne.n	800249e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	3302      	adds	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	e007      	b.n	80024ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	3301      	adds	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1cf      	bne.n	8002466 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2200      	movs	r2, #0
 80024ce:	2140      	movs	r1, #64	; 0x40
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f962 	bl	800279a <UART_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e006      	b.n	80024ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e000      	b.n	80024ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
  }
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	4613      	mov	r3, r2
 8002502:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b20      	cmp	r3, #32
 800250e:	d11d      	bne.n	800254c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_UART_Receive_DMA+0x26>
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e016      	b.n	800254e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_UART_Receive_DMA+0x38>
 800252a:	2302      	movs	r3, #2
 800252c:	e00f      	b.n	800254e <HAL_UART_Receive_DMA+0x58>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	461a      	mov	r2, r3
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f998 	bl	8002878 <UART_Start_Receive_DMA>
 8002548:	4603      	mov	r3, r0
 800254a:	e000      	b.n	800254e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800254c:	2302      	movs	r3, #2
  }
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b09c      	sub	sp, #112	; 0x70
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d172      	bne.n	80026ac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80025c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c8:	2200      	movs	r2, #0
 80025ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	330c      	adds	r3, #12
 80025d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d6:	e853 3f00 	ldrex	r3, [r3]
 80025da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80025dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80025e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	330c      	adds	r3, #12
 80025ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80025ee:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025f4:	e841 2300 	strex	r3, r2, [r1]
 80025f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80025fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1e5      	bne.n	80025cc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3314      	adds	r3, #20
 8002606:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260a:	e853 3f00 	ldrex	r3, [r3]
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002612:	f023 0301 	bic.w	r3, r3, #1
 8002616:	667b      	str	r3, [r7, #100]	; 0x64
 8002618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3314      	adds	r3, #20
 800261e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002620:	647a      	str	r2, [r7, #68]	; 0x44
 8002622:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002624:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002628:	e841 2300 	strex	r3, r2, [r1]
 800262c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800262e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1e5      	bne.n	8002600 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3314      	adds	r3, #20
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	e853 3f00 	ldrex	r3, [r3]
 8002642:	623b      	str	r3, [r7, #32]
   return(result);
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800264a:	663b      	str	r3, [r7, #96]	; 0x60
 800264c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3314      	adds	r3, #20
 8002652:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002654:	633a      	str	r2, [r7, #48]	; 0x30
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002658:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800265a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800265c:	e841 2300 	strex	r3, r2, [r1]
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e5      	bne.n	8002634 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	2b01      	cmp	r3, #1
 8002676:	d119      	bne.n	80026ac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	330c      	adds	r3, #12
 800267e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	e853 3f00 	ldrex	r3, [r3]
 8002686:	60fb      	str	r3, [r7, #12]
   return(result);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0310 	bic.w	r3, r3, #16
 800268e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	330c      	adds	r3, #12
 8002696:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002698:	61fa      	str	r2, [r7, #28]
 800269a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269c:	69b9      	ldr	r1, [r7, #24]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	e841 2300 	strex	r3, r2, [r1]
 80026a4:	617b      	str	r3, [r7, #20]
   return(result);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1e5      	bne.n	8002678 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d106      	bne.n	80026c2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026b8:	4619      	mov	r1, r3
 80026ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80026bc:	f7ff ff69 	bl	8002592 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80026c0:	e002      	b.n	80026c8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80026c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80026c4:	f7ff ff47 	bl	8002556 <HAL_UART_RxCpltCallback>
}
 80026c8:	bf00      	nop
 80026ca:	3770      	adds	r7, #112	; 0x70
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d108      	bne.n	80026f8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	4619      	mov	r1, r3
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f7ff ff4e 	bl	8002592 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80026f6:	e002      	b.n	80026fe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f7ff ff36 	bl	800256a <HAL_UART_RxHalfCpltCallback>
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002722:	2b80      	cmp	r3, #128	; 0x80
 8002724:	bf0c      	ite	eq
 8002726:	2301      	moveq	r3, #1
 8002728:	2300      	movne	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b21      	cmp	r3, #33	; 0x21
 8002738:	d108      	bne.n	800274c <UART_DMAError+0x46>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2200      	movs	r2, #0
 8002744:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002746:	68b8      	ldr	r0, [r7, #8]
 8002748:	f000 f934 	bl	80029b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b40      	cmp	r3, #64	; 0x40
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b22      	cmp	r3, #34	; 0x22
 800276c:	d108      	bne.n	8002780 <UART_DMAError+0x7a>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2200      	movs	r2, #0
 8002778:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800277a:	68b8      	ldr	r0, [r7, #8]
 800277c:	f000 f942 	bl	8002a04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f043 0210 	orr.w	r2, r3, #16
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800278c:	68b8      	ldr	r0, [r7, #8]
 800278e:	f7ff fef6 	bl	800257e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b090      	sub	sp, #64	; 0x40
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	4613      	mov	r3, r2
 80027a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027aa:	e050      	b.n	800284e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b2:	d04c      	beq.n	800284e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <UART_WaitOnFlagUntilTimeout+0x30>
 80027ba:	f7fe f975 	bl	8000aa8 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d241      	bcs.n	800284e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d4:	e853 3f00 	ldrex	r3, [r3]
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	330c      	adds	r3, #12
 80027e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027ea:	637a      	str	r2, [r7, #52]	; 0x34
 80027ec:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027f2:	e841 2300 	strex	r3, r2, [r1]
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1e5      	bne.n	80027ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3314      	adds	r3, #20
 8002804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	e853 3f00 	ldrex	r3, [r3]
 800280c:	613b      	str	r3, [r7, #16]
   return(result);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	63bb      	str	r3, [r7, #56]	; 0x38
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3314      	adds	r3, #20
 800281c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800281e:	623a      	str	r2, [r7, #32]
 8002820:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002822:	69f9      	ldr	r1, [r7, #28]
 8002824:	6a3a      	ldr	r2, [r7, #32]
 8002826:	e841 2300 	strex	r3, r2, [r1]
 800282a:	61bb      	str	r3, [r7, #24]
   return(result);
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1e5      	bne.n	80027fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e00f      	b.n	800286e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4013      	ands	r3, r2
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	429a      	cmp	r2, r3
 800285c:	bf0c      	ite	eq
 800285e:	2301      	moveq	r3, #1
 8002860:	2300      	movne	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	429a      	cmp	r2, r3
 800286a:	d09f      	beq.n	80027ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3740      	adds	r7, #64	; 0x40
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b098      	sub	sp, #96	; 0x60
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	4613      	mov	r3, r2
 8002884:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88fa      	ldrh	r2, [r7, #6]
 8002890:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2222      	movs	r2, #34	; 0x22
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	4a40      	ldr	r2, [pc, #256]	; (80029a8 <UART_Start_Receive_DMA+0x130>)
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ac:	4a3f      	ldr	r2, [pc, #252]	; (80029ac <UART_Start_Receive_DMA+0x134>)
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	4a3e      	ldr	r2, [pc, #248]	; (80029b0 <UART_Start_Receive_DMA+0x138>)
 80028b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	2200      	movs	r2, #0
 80028be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80028c0:	f107 0308 	add.w	r3, r7, #8
 80028c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3304      	adds	r3, #4
 80028d0:	4619      	mov	r1, r3
 80028d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	f7fe fad6 	bl	8000e88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d019      	beq.n	8002936 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	330c      	adds	r3, #12
 8002908:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290c:	e853 3f00 	ldrex	r3, [r3]
 8002910:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002918:	65bb      	str	r3, [r7, #88]	; 0x58
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002922:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002924:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002926:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002928:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800292a:	e841 2300 	strex	r3, r2, [r1]
 800292e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1e5      	bne.n	8002902 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3314      	adds	r3, #20
 800293c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	657b      	str	r3, [r7, #84]	; 0x54
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3314      	adds	r3, #20
 8002954:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002956:	63ba      	str	r2, [r7, #56]	; 0x38
 8002958:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800295c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800295e:	e841 2300 	strex	r3, r2, [r1]
 8002962:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1e5      	bne.n	8002936 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3314      	adds	r3, #20
 8002970:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	e853 3f00 	ldrex	r3, [r3]
 8002978:	617b      	str	r3, [r7, #20]
   return(result);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002980:	653b      	str	r3, [r7, #80]	; 0x50
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3314      	adds	r3, #20
 8002988:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800298a:	627a      	str	r2, [r7, #36]	; 0x24
 800298c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298e:	6a39      	ldr	r1, [r7, #32]
 8002990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002992:	e841 2300 	strex	r3, r2, [r1]
 8002996:	61fb      	str	r3, [r7, #28]
   return(result);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1e5      	bne.n	800296a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3760      	adds	r7, #96	; 0x60
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	080025ab 	.word	0x080025ab
 80029ac:	080026d1 	.word	0x080026d1
 80029b0:	08002707 	.word	0x08002707

080029b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	330c      	adds	r3, #12
 80029c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	e853 3f00 	ldrex	r3, [r3]
 80029ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	69fa      	ldr	r2, [r7, #28]
 80029dc:	61ba      	str	r2, [r7, #24]
 80029de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e0:	6979      	ldr	r1, [r7, #20]
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	e841 2300 	strex	r3, r2, [r1]
 80029e8:	613b      	str	r3, [r7, #16]
   return(result);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e5      	bne.n	80029bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80029f8:	bf00      	nop
 80029fa:	3724      	adds	r7, #36	; 0x24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b095      	sub	sp, #84	; 0x54
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a16:	e853 3f00 	ldrex	r3, [r3]
 8002a1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	330c      	adds	r3, #12
 8002a2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a2c:	643a      	str	r2, [r7, #64]	; 0x40
 8002a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a34:	e841 2300 	strex	r3, r2, [r1]
 8002a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e5      	bne.n	8002a0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3314      	adds	r3, #20
 8002a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	e853 3f00 	ldrex	r3, [r3]
 8002a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3314      	adds	r3, #20
 8002a5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a68:	e841 2300 	strex	r3, r2, [r1]
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e5      	bne.n	8002a40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d119      	bne.n	8002ab0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	330c      	adds	r3, #12
 8002a82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	e853 3f00 	ldrex	r3, [r3]
 8002a8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f023 0310 	bic.w	r3, r3, #16
 8002a92:	647b      	str	r3, [r7, #68]	; 0x44
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	330c      	adds	r3, #12
 8002a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a9c:	61ba      	str	r2, [r7, #24]
 8002a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa0:	6979      	ldr	r1, [r7, #20]
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	e841 2300 	strex	r3, r2, [r1]
 8002aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1e5      	bne.n	8002a7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002abe:	bf00      	nop
 8002ac0:	3754      	adds	r7, #84	; 0x54
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad0:	b0c0      	sub	sp, #256	; 0x100
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae8:	68d9      	ldr	r1, [r3, #12]
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	ea40 0301 	orr.w	r3, r0, r1
 8002af4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b24:	f021 010c 	bic.w	r1, r1, #12
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b32:	430b      	orrs	r3, r1
 8002b34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b46:	6999      	ldr	r1, [r3, #24]
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	ea40 0301 	orr.w	r3, r0, r1
 8002b52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b8f      	ldr	r3, [pc, #572]	; (8002d98 <UART_SetConfig+0x2cc>)
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d005      	beq.n	8002b6c <UART_SetConfig+0xa0>
 8002b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4b8d      	ldr	r3, [pc, #564]	; (8002d9c <UART_SetConfig+0x2d0>)
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d104      	bne.n	8002b76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b6c:	f7fe ff02 	bl	8001974 <HAL_RCC_GetPCLK2Freq>
 8002b70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b74:	e003      	b.n	8002b7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b76:	f7fe fee9 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8002b7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b88:	f040 810c 	bne.w	8002da4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b90:	2200      	movs	r2, #0
 8002b92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b9e:	4622      	mov	r2, r4
 8002ba0:	462b      	mov	r3, r5
 8002ba2:	1891      	adds	r1, r2, r2
 8002ba4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ba6:	415b      	adcs	r3, r3
 8002ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002baa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bae:	4621      	mov	r1, r4
 8002bb0:	eb12 0801 	adds.w	r8, r2, r1
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	eb43 0901 	adc.w	r9, r3, r1
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bce:	4690      	mov	r8, r2
 8002bd0:	4699      	mov	r9, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	eb18 0303 	adds.w	r3, r8, r3
 8002bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bdc:	462b      	mov	r3, r5
 8002bde:	eb49 0303 	adc.w	r3, r9, r3
 8002be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bf2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	18db      	adds	r3, r3, r3
 8002bfe:	653b      	str	r3, [r7, #80]	; 0x50
 8002c00:	4613      	mov	r3, r2
 8002c02:	eb42 0303 	adc.w	r3, r2, r3
 8002c06:	657b      	str	r3, [r7, #84]	; 0x54
 8002c08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c10:	f7fd faf8 	bl	8000204 <__aeabi_uldivmod>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4b61      	ldr	r3, [pc, #388]	; (8002da0 <UART_SetConfig+0x2d4>)
 8002c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	011c      	lsls	r4, r3, #4
 8002c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c26:	2200      	movs	r2, #0
 8002c28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c34:	4642      	mov	r2, r8
 8002c36:	464b      	mov	r3, r9
 8002c38:	1891      	adds	r1, r2, r2
 8002c3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c3c:	415b      	adcs	r3, r3
 8002c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c44:	4641      	mov	r1, r8
 8002c46:	eb12 0a01 	adds.w	sl, r2, r1
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	eb43 0b01 	adc.w	fp, r3, r1
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c64:	4692      	mov	sl, r2
 8002c66:	469b      	mov	fp, r3
 8002c68:	4643      	mov	r3, r8
 8002c6a:	eb1a 0303 	adds.w	r3, sl, r3
 8002c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c72:	464b      	mov	r3, r9
 8002c74:	eb4b 0303 	adc.w	r3, fp, r3
 8002c78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c90:	460b      	mov	r3, r1
 8002c92:	18db      	adds	r3, r3, r3
 8002c94:	643b      	str	r3, [r7, #64]	; 0x40
 8002c96:	4613      	mov	r3, r2
 8002c98:	eb42 0303 	adc.w	r3, r2, r3
 8002c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ca2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ca6:	f7fd faad 	bl	8000204 <__aeabi_uldivmod>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4b3b      	ldr	r3, [pc, #236]	; (8002da0 <UART_SetConfig+0x2d4>)
 8002cb2:	fba3 2301 	umull	r2, r3, r3, r1
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	2264      	movs	r2, #100	; 0x64
 8002cba:	fb02 f303 	mul.w	r3, r2, r3
 8002cbe:	1acb      	subs	r3, r1, r3
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cc6:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <UART_SetConfig+0x2d4>)
 8002cc8:	fba3 2302 	umull	r2, r3, r3, r2
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cd4:	441c      	add	r4, r3
 8002cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ce0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ce4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ce8:	4642      	mov	r2, r8
 8002cea:	464b      	mov	r3, r9
 8002cec:	1891      	adds	r1, r2, r2
 8002cee:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cf0:	415b      	adcs	r3, r3
 8002cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cf8:	4641      	mov	r1, r8
 8002cfa:	1851      	adds	r1, r2, r1
 8002cfc:	6339      	str	r1, [r7, #48]	; 0x30
 8002cfe:	4649      	mov	r1, r9
 8002d00:	414b      	adcs	r3, r1
 8002d02:	637b      	str	r3, [r7, #52]	; 0x34
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d10:	4659      	mov	r1, fp
 8002d12:	00cb      	lsls	r3, r1, #3
 8002d14:	4651      	mov	r1, sl
 8002d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d1a:	4651      	mov	r1, sl
 8002d1c:	00ca      	lsls	r2, r1, #3
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	4642      	mov	r2, r8
 8002d26:	189b      	adds	r3, r3, r2
 8002d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d2c:	464b      	mov	r3, r9
 8002d2e:	460a      	mov	r2, r1
 8002d30:	eb42 0303 	adc.w	r3, r2, r3
 8002d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	18db      	adds	r3, r3, r3
 8002d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d52:	4613      	mov	r3, r2
 8002d54:	eb42 0303 	adc.w	r3, r2, r3
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d62:	f7fd fa4f 	bl	8000204 <__aeabi_uldivmod>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <UART_SetConfig+0x2d4>)
 8002d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	2164      	movs	r1, #100	; 0x64
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	3332      	adds	r3, #50	; 0x32
 8002d7e:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <UART_SetConfig+0x2d4>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	f003 0207 	and.w	r2, r3, #7
 8002d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4422      	add	r2, r4
 8002d92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d94:	e105      	b.n	8002fa2 <UART_SetConfig+0x4d6>
 8002d96:	bf00      	nop
 8002d98:	40011000 	.word	0x40011000
 8002d9c:	40011400 	.word	0x40011400
 8002da0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da8:	2200      	movs	r2, #0
 8002daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002db2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002db6:	4642      	mov	r2, r8
 8002db8:	464b      	mov	r3, r9
 8002dba:	1891      	adds	r1, r2, r2
 8002dbc:	6239      	str	r1, [r7, #32]
 8002dbe:	415b      	adcs	r3, r3
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dc6:	4641      	mov	r1, r8
 8002dc8:	1854      	adds	r4, r2, r1
 8002dca:	4649      	mov	r1, r9
 8002dcc:	eb43 0501 	adc.w	r5, r3, r1
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	00eb      	lsls	r3, r5, #3
 8002dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dde:	00e2      	lsls	r2, r4, #3
 8002de0:	4614      	mov	r4, r2
 8002de2:	461d      	mov	r5, r3
 8002de4:	4643      	mov	r3, r8
 8002de6:	18e3      	adds	r3, r4, r3
 8002de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dec:	464b      	mov	r3, r9
 8002dee:	eb45 0303 	adc.w	r3, r5, r3
 8002df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e12:	4629      	mov	r1, r5
 8002e14:	008b      	lsls	r3, r1, #2
 8002e16:	4621      	mov	r1, r4
 8002e18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	008a      	lsls	r2, r1, #2
 8002e20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e24:	f7fd f9ee 	bl	8000204 <__aeabi_uldivmod>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4b60      	ldr	r3, [pc, #384]	; (8002fb0 <UART_SetConfig+0x4e4>)
 8002e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	011c      	lsls	r4, r3, #4
 8002e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e48:	4642      	mov	r2, r8
 8002e4a:	464b      	mov	r3, r9
 8002e4c:	1891      	adds	r1, r2, r2
 8002e4e:	61b9      	str	r1, [r7, #24]
 8002e50:	415b      	adcs	r3, r3
 8002e52:	61fb      	str	r3, [r7, #28]
 8002e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e58:	4641      	mov	r1, r8
 8002e5a:	1851      	adds	r1, r2, r1
 8002e5c:	6139      	str	r1, [r7, #16]
 8002e5e:	4649      	mov	r1, r9
 8002e60:	414b      	adcs	r3, r1
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e70:	4659      	mov	r1, fp
 8002e72:	00cb      	lsls	r3, r1, #3
 8002e74:	4651      	mov	r1, sl
 8002e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7a:	4651      	mov	r1, sl
 8002e7c:	00ca      	lsls	r2, r1, #3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	4642      	mov	r2, r8
 8002e86:	189b      	adds	r3, r3, r2
 8002e88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e8c:	464b      	mov	r3, r9
 8002e8e:	460a      	mov	r2, r1
 8002e90:	eb42 0303 	adc.w	r3, r2, r3
 8002e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ea2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002eb0:	4649      	mov	r1, r9
 8002eb2:	008b      	lsls	r3, r1, #2
 8002eb4:	4641      	mov	r1, r8
 8002eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eba:	4641      	mov	r1, r8
 8002ebc:	008a      	lsls	r2, r1, #2
 8002ebe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ec2:	f7fd f99f 	bl	8000204 <__aeabi_uldivmod>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4b39      	ldr	r3, [pc, #228]	; (8002fb0 <UART_SetConfig+0x4e4>)
 8002ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	2164      	movs	r1, #100	; 0x64
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	3332      	adds	r3, #50	; 0x32
 8002ede:	4a34      	ldr	r2, [pc, #208]	; (8002fb0 <UART_SetConfig+0x4e4>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eea:	441c      	add	r4, r3
 8002eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8002ef4:	677a      	str	r2, [r7, #116]	; 0x74
 8002ef6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002efa:	4642      	mov	r2, r8
 8002efc:	464b      	mov	r3, r9
 8002efe:	1891      	adds	r1, r2, r2
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	415b      	adcs	r3, r3
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	1851      	adds	r1, r2, r1
 8002f0e:	6039      	str	r1, [r7, #0]
 8002f10:	4649      	mov	r1, r9
 8002f12:	414b      	adcs	r3, r1
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f22:	4659      	mov	r1, fp
 8002f24:	00cb      	lsls	r3, r1, #3
 8002f26:	4651      	mov	r1, sl
 8002f28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f2c:	4651      	mov	r1, sl
 8002f2e:	00ca      	lsls	r2, r1, #3
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	4603      	mov	r3, r0
 8002f36:	4642      	mov	r2, r8
 8002f38:	189b      	adds	r3, r3, r2
 8002f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f3c:	464b      	mov	r3, r9
 8002f3e:	460a      	mov	r2, r1
 8002f40:	eb42 0303 	adc.w	r3, r2, r3
 8002f44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	663b      	str	r3, [r7, #96]	; 0x60
 8002f50:	667a      	str	r2, [r7, #100]	; 0x64
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f5e:	4649      	mov	r1, r9
 8002f60:	008b      	lsls	r3, r1, #2
 8002f62:	4641      	mov	r1, r8
 8002f64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f68:	4641      	mov	r1, r8
 8002f6a:	008a      	lsls	r2, r1, #2
 8002f6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f70:	f7fd f948 	bl	8000204 <__aeabi_uldivmod>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <UART_SetConfig+0x4e4>)
 8002f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2164      	movs	r1, #100	; 0x64
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	3332      	adds	r3, #50	; 0x32
 8002f8c:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <UART_SetConfig+0x4e4>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4422      	add	r2, r4
 8002fa0:	609a      	str	r2, [r3, #8]
}
 8002fa2:	bf00      	nop
 8002fa4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fae:	bf00      	nop
 8002fb0:	51eb851f 	.word	0x51eb851f

08002fb4 <__libc_init_array>:
 8002fb4:	b570      	push	{r4, r5, r6, lr}
 8002fb6:	4d0d      	ldr	r5, [pc, #52]	; (8002fec <__libc_init_array+0x38>)
 8002fb8:	4c0d      	ldr	r4, [pc, #52]	; (8002ff0 <__libc_init_array+0x3c>)
 8002fba:	1b64      	subs	r4, r4, r5
 8002fbc:	10a4      	asrs	r4, r4, #2
 8002fbe:	2600      	movs	r6, #0
 8002fc0:	42a6      	cmp	r6, r4
 8002fc2:	d109      	bne.n	8002fd8 <__libc_init_array+0x24>
 8002fc4:	4d0b      	ldr	r5, [pc, #44]	; (8002ff4 <__libc_init_array+0x40>)
 8002fc6:	4c0c      	ldr	r4, [pc, #48]	; (8002ff8 <__libc_init_array+0x44>)
 8002fc8:	f000 f820 	bl	800300c <_init>
 8002fcc:	1b64      	subs	r4, r4, r5
 8002fce:	10a4      	asrs	r4, r4, #2
 8002fd0:	2600      	movs	r6, #0
 8002fd2:	42a6      	cmp	r6, r4
 8002fd4:	d105      	bne.n	8002fe2 <__libc_init_array+0x2e>
 8002fd6:	bd70      	pop	{r4, r5, r6, pc}
 8002fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fdc:	4798      	blx	r3
 8002fde:	3601      	adds	r6, #1
 8002fe0:	e7ee      	b.n	8002fc0 <__libc_init_array+0xc>
 8002fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe6:	4798      	blx	r3
 8002fe8:	3601      	adds	r6, #1
 8002fea:	e7f2      	b.n	8002fd2 <__libc_init_array+0x1e>
 8002fec:	08003050 	.word	0x08003050
 8002ff0:	08003050 	.word	0x08003050
 8002ff4:	08003050 	.word	0x08003050
 8002ff8:	08003054 	.word	0x08003054

08002ffc <memset>:
 8002ffc:	4402      	add	r2, r0
 8002ffe:	4603      	mov	r3, r0
 8003000:	4293      	cmp	r3, r2
 8003002:	d100      	bne.n	8003006 <memset+0xa>
 8003004:	4770      	bx	lr
 8003006:	f803 1b01 	strb.w	r1, [r3], #1
 800300a:	e7f9      	b.n	8003000 <memset+0x4>

0800300c <_init>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	bf00      	nop
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr

08003018 <_fini>:
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	bf00      	nop
 800301c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301e:	bc08      	pop	{r3}
 8003020:	469e      	mov	lr, r3
 8003022:	4770      	bx	lr
