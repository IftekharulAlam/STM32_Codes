
freeRTOS_semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005118  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800548c  0800548c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800548c  0800548c  0001548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005494  08005494  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005498  08005498  00015498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800549c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004064  20000010  080054ac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004074  080054ac  00024074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146e5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5f  00000000  00000000  00034725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00037488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  00038658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022de0  00000000  00000000  00039710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001444b  00000000  00000000  0005c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d89c3  00000000  00000000  0007093b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001492fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a68  00000000  00000000  00149350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080052d0 	.word	0x080052d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	080052d0 	.word	0x080052d0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <vApplicationGetIdleTaskMemory+0x2c>)
 8000534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <vApplicationGetIdleTaskMemory+0x30>)
 800053a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	2000002c 	.word	0x2000002c
 8000554:	20000080 	.word	0x20000080

08000558 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b098      	sub	sp, #96	; 0x60
 800055c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800055e:	f000 fb75 	bl	8000c4c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000562:	f000 f859 	bl	8000618 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000566:	f000 f8ef 	bl	8000748 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800056a:	f000 f8c3 	bl	80006f4 <MX_USART2_UART_Init>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of BinSem */
	osSemaphoreDef(BinSem);
 800056e:	2300      	movs	r3, #0
 8000570:	65bb      	str	r3, [r7, #88]	; 0x58
 8000572:	2300      	movs	r3, #0
 8000574:	65fb      	str	r3, [r7, #92]	; 0x5c
	BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 8000576:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800057a:	2101      	movs	r1, #1
 800057c:	4618      	mov	r0, r3
 800057e:	f002 fb6a 	bl	8002c56 <osSemaphoreCreate>
 8000582:	4603      	mov	r3, r0
 8000584:	4a1d      	ldr	r2, [pc, #116]	; (80005fc <main+0xa4>)
 8000586:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <main+0xa8>)
 800058a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800058e:	461d      	mov	r5, r3
 8000590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000594:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800059c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 faf7 	bl	8002b96 <osThreadCreate>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a16      	ldr	r2, [pc, #88]	; (8000604 <main+0xac>)
 80005ac:	6013      	str	r3, [r2, #0]

	/* definition and creation of task2 */
	osThreadDef(task2, task2_init, osPriorityAboveNormal, 0, 128);
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <main+0xb0>)
 80005b0:	f107 0420 	add.w	r4, r7, #32
 80005b4:	461d      	mov	r5, r3
 80005b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	task2Handle = osThreadCreate(osThread(task2), NULL);
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 fae4 	bl	8002b96 <osThreadCreate>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a0e      	ldr	r2, [pc, #56]	; (800060c <main+0xb4>)
 80005d2:	6013      	str	r3, [r2, #0]

	/* definition and creation of task3 */
	osThreadDef(task3, task3_init, osPriorityBelowNormal, 0, 128);
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <main+0xb8>)
 80005d6:	1d3c      	adds	r4, r7, #4
 80005d8:	461d      	mov	r5, r3
 80005da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	task3Handle = osThreadCreate(osThread(task3), NULL);
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fad3 	bl	8002b96 <osThreadCreate>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a08      	ldr	r2, [pc, #32]	; (8000614 <main+0xbc>)
 80005f4:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80005f6:	f002 fac7 	bl	8002b88 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005fa:	e7fe      	b.n	80005fa <main+0xa2>
 80005fc:	200002d0 	.word	0x200002d0
 8000600:	08005304 	.word	0x08005304
 8000604:	200002c4 	.word	0x200002c4
 8000608:	08005320 	.word	0x08005320
 800060c:	200002c8 	.word	0x200002c8
 8000610:	0800533c 	.word	0x0800533c
 8000614:	200002cc 	.word	0x200002cc

08000618 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2234      	movs	r2, #52	; 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fe4a 	bl	80052c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <SystemClock_Config+0xd4>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a29      	ldr	r2, [pc, #164]	; (80006ec <SystemClock_Config+0xd4>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <SystemClock_Config+0xd4>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000658:	2300      	movs	r3, #0
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <SystemClock_Config+0xd8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000664:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <SystemClock_Config+0xd8>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <SystemClock_Config+0xd8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 800068c:	2310      	movs	r3, #16
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000690:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000694:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000696:	2304      	movs	r3, #4
 8000698:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800069a:	2302      	movs	r3, #2
 800069c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f936 	bl	8001918 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x9e>
		Error_Handler();
 80006b2:	f000 f983 	bl	80009bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2102      	movs	r1, #2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fda4 	bl	8001220 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xca>
		Error_Handler();
 80006de:	f000 f96d 	bl	80009bc <Error_Handler>
	}
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_USART2_UART_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800072c:	f001 fe40 	bl	80023b0 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000736:	f000 f941 	bl	80009bc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000280 	.word	0x20000280
 8000744:	40004400 	.word	0x40004400

08000748 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a2c      	ldr	r2, [pc, #176]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a25      	ldr	r2, [pc, #148]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b23      	ldr	r3, [pc, #140]	; (8000818 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a1e      	ldr	r2, [pc, #120]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a17      	ldr	r2, [pc, #92]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2120      	movs	r1, #32
 80007d2:	4812      	ldr	r0, [pc, #72]	; (800081c <MX_GPIO_Init+0xd4>)
 80007d4:	f000 fd0a 	bl	80011ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80007d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	480c      	ldr	r0, [pc, #48]	; (8000820 <MX_GPIO_Init+0xd8>)
 80007f0:	f000 fb50 	bl	8000e94 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80007f4:	2320      	movs	r3, #32
 80007f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_GPIO_Init+0xd4>)
 800080c:	f000 fb42 	bl	8000e94 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	; 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000
 8000820:	40020800 	.word	0x40020800

08000824 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		char *str1 = "Entered MediumTask";
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <StartDefaultTask+0x44>)
 800082e:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*) str1, strlen(str1), 100);
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f7ff fced 	bl	8000210 <strlen>
 8000836:	4603      	mov	r3, r0
 8000838:	b29a      	uxth	r2, r3
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	68f9      	ldr	r1, [r7, #12]
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <StartDefaultTask+0x48>)
 8000840:	f001 fe03 	bl	800244a <HAL_UART_Transmit>

		char *str2 = "Leaving MediumTask";
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <StartDefaultTask+0x4c>)
 8000846:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t*) str2, strlen(str2), 100);
 8000848:	68b8      	ldr	r0, [r7, #8]
 800084a:	f7ff fce1 	bl	8000210 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b29a      	uxth	r2, r3
 8000852:	2364      	movs	r3, #100	; 0x64
 8000854:	68b9      	ldr	r1, [r7, #8]
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <StartDefaultTask+0x48>)
 8000858:	f001 fdf7 	bl	800244a <HAL_UART_Transmit>
		osDelay(500);
 800085c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000860:	f002 f9e5 	bl	8002c2e <osDelay>
	for (;;) {
 8000864:	e7e2      	b.n	800082c <StartDefaultTask+0x8>
 8000866:	bf00      	nop
 8000868:	08005358 	.word	0x08005358
 800086c:	20000280 	.word	0x20000280
 8000870:	0800536c 	.word	0x0800536c

08000874 <task2_init>:
 * @brief Function implementing the task2 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_task2_init */
void task2_init(void const *argument) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN task2_init */
	/* Infinite loop */
	for (;;) {
		char *str1 = "Entered HighTask and waiting for Semaphore";
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <task2_init+0x74>)
 800087e:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart2, (uint8_t*) str1, strlen(str1), 100);
 8000880:	6978      	ldr	r0, [r7, #20]
 8000882:	f7ff fcc5 	bl	8000210 <strlen>
 8000886:	4603      	mov	r3, r0
 8000888:	b29a      	uxth	r2, r3
 800088a:	2364      	movs	r3, #100	; 0x64
 800088c:	6979      	ldr	r1, [r7, #20]
 800088e:	4817      	ldr	r0, [pc, #92]	; (80008ec <task2_init+0x78>)
 8000890:	f001 fddb 	bl	800244a <HAL_UART_Transmit>

		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <task2_init+0x7c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f04f 31ff 	mov.w	r1, #4294967295
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fa0d 	bl	8002cbc <osSemaphoreWait>

		char *str3 = "Semaphore acquired by HIGH Task";
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <task2_init+0x80>)
 80008a4:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t*) str3, strlen(str3), 100);
 80008a6:	6938      	ldr	r0, [r7, #16]
 80008a8:	f7ff fcb2 	bl	8000210 <strlen>
 80008ac:	4603      	mov	r3, r0
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	2364      	movs	r3, #100	; 0x64
 80008b2:	6939      	ldr	r1, [r7, #16]
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <task2_init+0x78>)
 80008b6:	f001 fdc8 	bl	800244a <HAL_UART_Transmit>

		char *str2 = "Leaving HighTask and releasing Semaphore";
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <task2_init+0x84>)
 80008bc:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*) str2, strlen(str2), 100);
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f7ff fca6 	bl	8000210 <strlen>
 80008c4:	4603      	mov	r3, r0
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	2364      	movs	r3, #100	; 0x64
 80008ca:	68f9      	ldr	r1, [r7, #12]
 80008cc:	4807      	ldr	r0, [pc, #28]	; (80008ec <task2_init+0x78>)
 80008ce:	f001 fdbc 	bl	800244a <HAL_UART_Transmit>

		osSemaphoreRelease(BinSemHandle);
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <task2_init+0x7c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fa3e 	bl	8002d58 <osSemaphoreRelease>
		osDelay(500);
 80008dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e0:	f002 f9a5 	bl	8002c2e <osDelay>
	for (;;) {
 80008e4:	e7ca      	b.n	800087c <task2_init+0x8>
 80008e6:	bf00      	nop
 80008e8:	08005380 	.word	0x08005380
 80008ec:	20000280 	.word	0x20000280
 80008f0:	200002d0 	.word	0x200002d0
 80008f4:	080053ac 	.word	0x080053ac
 80008f8:	080053cc 	.word	0x080053cc

080008fc <task3_init>:
 * @brief Function implementing the task3 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_task3_init */
void task3_init(void const *argument) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN task3_init */
	/* Infinite loop */
	for (;;) {
		char *str1 = "Entered LOWTask and waiting for semaphore";
 8000904:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <task3_init+0x84>)
 8000906:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart2, (uint8_t*) str1, strlen(str1), 100);
 8000908:	6978      	ldr	r0, [r7, #20]
 800090a:	f7ff fc81 	bl	8000210 <strlen>
 800090e:	4603      	mov	r3, r0
 8000910:	b29a      	uxth	r2, r3
 8000912:	2364      	movs	r3, #100	; 0x64
 8000914:	6979      	ldr	r1, [r7, #20]
 8000916:	481b      	ldr	r0, [pc, #108]	; (8000984 <task3_init+0x88>)
 8000918:	f001 fd97 	bl	800244a <HAL_UART_Transmit>

		osSemaphoreWait(BinSemHandle, osWaitForever);
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <task3_init+0x8c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f04f 31ff 	mov.w	r1, #4294967295
 8000924:	4618      	mov	r0, r3
 8000926:	f002 f9c9 	bl	8002cbc <osSemaphoreWait>
		char *str3 = "Semaphore acquired by LOW Task";
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <task3_init+0x90>)
 800092c:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t*) str3, strlen(str3), 100);
 800092e:	6938      	ldr	r0, [r7, #16]
 8000930:	f7ff fc6e 	bl	8000210 <strlen>
 8000934:	4603      	mov	r3, r0
 8000936:	b29a      	uxth	r2, r3
 8000938:	2364      	movs	r3, #100	; 0x64
 800093a:	6939      	ldr	r1, [r7, #16]
 800093c:	4811      	ldr	r0, [pc, #68]	; (8000984 <task3_init+0x88>)
 800093e:	f001 fd84 	bl	800244a <HAL_UART_Transmit>

		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000942:	bf00      	nop
 8000944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000948:	4811      	ldr	r0, [pc, #68]	; (8000990 <task3_init+0x94>)
 800094a:	f000 fc37 	bl	80011bc <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d1f7      	bne.n	8000944 <task3_init+0x48>
			;  // wait till the pin go low

		char *str2 = "Leaving LOWTask and releasing Semaphore";
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <task3_init+0x98>)
 8000956:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*) str2, strlen(str2), 100);
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f7ff fc59 	bl	8000210 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	b29a      	uxth	r2, r3
 8000962:	2364      	movs	r3, #100	; 0x64
 8000964:	68f9      	ldr	r1, [r7, #12]
 8000966:	4807      	ldr	r0, [pc, #28]	; (8000984 <task3_init+0x88>)
 8000968:	f001 fd6f 	bl	800244a <HAL_UART_Transmit>

		osSemaphoreRelease(BinSemHandle);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <task3_init+0x8c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f002 f9f1 	bl	8002d58 <osSemaphoreRelease>
		osDelay(500);
 8000976:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800097a:	f002 f958 	bl	8002c2e <osDelay>
	for (;;) {
 800097e:	e7c1      	b.n	8000904 <task3_init+0x8>
 8000980:	080053f8 	.word	0x080053f8
 8000984:	20000280 	.word	0x20000280
 8000988:	200002d0 	.word	0x200002d0
 800098c:	08005424 	.word	0x08005424
 8000990:	40020800 	.word	0x40020800
 8000994:	08005444 	.word	0x08005444

08000998 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d101      	bne.n	80009ae <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80009aa:	f000 f971 	bl	8000c90 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40010000 	.word	0x40010000

080009bc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_MspInit+0x54>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a11      	ldr	r2, [pc, #68]	; (8000a1c <HAL_MspInit+0x54>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_MspInit+0x54>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_MspInit+0x54>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_MspInit+0x54>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_MspInit+0x54>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	210f      	movs	r1, #15
 8000a0a:	f06f 0001 	mvn.w	r0, #1
 8000a0e:	f000 fa17 	bl	8000e40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <HAL_UART_MspInit+0x84>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d12b      	bne.n	8000a9a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a7a:	230c      	movs	r3, #12
 8000a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <HAL_UART_MspInit+0x8c>)
 8000a96:	f000 f9fd 	bl	8000e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40004400 	.word	0x40004400
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000

08000ab0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08c      	sub	sp, #48	; 0x30
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <HAL_InitTick+0xd0>)
 8000ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac8:	4a2d      	ldr	r2, [pc, #180]	; (8000b80 <HAL_InitTick+0xd0>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <HAL_InitTick+0xd0>)
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000adc:	f107 020c 	add.w	r2, r7, #12
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fcb4 	bl	8001454 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000aec:	f000 fc9e 	bl	800142c <HAL_RCC_GetPCLK2Freq>
 8000af0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af4:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <HAL_InitTick+0xd4>)
 8000af6:	fba2 2303 	umull	r2, r3, r2, r3
 8000afa:	0c9b      	lsrs	r3, r3, #18
 8000afc:	3b01      	subs	r3, #1
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_InitTick+0xd8>)
 8000b02:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <HAL_InitTick+0xdc>)
 8000b04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b06:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <HAL_InitTick+0xd8>)
 8000b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b0e:	4a1e      	ldr	r2, [pc, #120]	; (8000b88 <HAL_InitTick+0xd8>)
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_InitTick+0xd8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_InitTick+0xd8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_InitTick+0xd8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b26:	4818      	ldr	r0, [pc, #96]	; (8000b88 <HAL_InitTick+0xd8>)
 8000b28:	f001 f994 	bl	8001e54 <HAL_TIM_Base_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d11b      	bne.n	8000b72 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b3a:	4813      	ldr	r0, [pc, #76]	; (8000b88 <HAL_InitTick+0xd8>)
 8000b3c:	f001 f9e4 	bl	8001f08 <HAL_TIM_Base_Start_IT>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d111      	bne.n	8000b72 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b4e:	2019      	movs	r0, #25
 8000b50:	f000 f992 	bl	8000e78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b0f      	cmp	r3, #15
 8000b58:	d808      	bhi.n	8000b6c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	2019      	movs	r0, #25
 8000b60:	f000 f96e 	bl	8000e40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b64:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_InitTick+0xe0>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	e002      	b.n	8000b72 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3730      	adds	r7, #48	; 0x30
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	431bde83 	.word	0x431bde83
 8000b88:	200002d4 	.word	0x200002d4
 8000b8c:	40010000 	.word	0x40010000
 8000b90:	20000004 	.word	0x20000004

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <NMI_Handler+0x4>

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bc6:	f001 fa0f 	bl	8001fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200002d4 	.word	0x200002d4

08000bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfe:	490e      	ldr	r1, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c14:	4c0b      	ldr	r4, [pc, #44]	; (8000c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c22:	f7ff ffd7 	bl	8000bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f004 fb19 	bl	800525c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fc95 	bl	8000558 <main>
  bx  lr    
 8000c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c3c:	0800549c 	.word	0x0800549c
  ldr r2, =_sbss
 8000c40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c44:	20004074 	.word	0x20004074

08000c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <HAL_Init+0x40>)
 8000c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_Init+0x40>)
 8000c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_Init+0x40>)
 8000c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f8d8 	bl	8000e2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7a:	200f      	movs	r0, #15
 8000c7c:	f7ff ff18 	bl	8000ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c80:	f7ff fea2 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023c00 	.word	0x40023c00

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	2000031c 	.word	0x2000031c

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	2000031c 	.word	0x2000031c

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <__NVIC_EnableIRQ+0x38>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	; (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	; 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ff4c 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e52:	f7ff ff61 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	6978      	ldr	r0, [r7, #20]
 8000e5e:	f7ff ffb1 	bl	8000dc4 <NVIC_EncodePriority>
 8000e62:	4602      	mov	r2, r0
 8000e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff80 	bl	8000d70 <__NVIC_SetPriority>
}
 8000e70:	bf00      	nop
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ff54 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	e165      	b.n	800117c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f040 8154 	bne.w	8001176 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d005      	beq.n	8000ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d130      	bne.n	8000f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 0201 	and.w	r2, r3, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d017      	beq.n	8000f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d123      	bne.n	8000fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	69b9      	ldr	r1, [r7, #24]
 8000fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0203 	and.w	r2, r3, #3
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80ae 	beq.w	8001176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <HAL_GPIO_Init+0x300>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a5c      	ldr	r2, [pc, #368]	; (8001194 <HAL_GPIO_Init+0x300>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b5a      	ldr	r3, [pc, #360]	; (8001194 <HAL_GPIO_Init+0x300>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001036:	4a58      	ldr	r2, [pc, #352]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4f      	ldr	r2, [pc, #316]	; (800119c <HAL_GPIO_Init+0x308>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d025      	beq.n	80010ae <HAL_GPIO_Init+0x21a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4e      	ldr	r2, [pc, #312]	; (80011a0 <HAL_GPIO_Init+0x30c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d01f      	beq.n	80010aa <HAL_GPIO_Init+0x216>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4d      	ldr	r2, [pc, #308]	; (80011a4 <HAL_GPIO_Init+0x310>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <HAL_GPIO_Init+0x212>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <HAL_GPIO_Init+0x314>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x20e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4b      	ldr	r2, [pc, #300]	; (80011ac <HAL_GPIO_Init+0x318>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x20a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4a      	ldr	r2, [pc, #296]	; (80011b0 <HAL_GPIO_Init+0x31c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x206>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a49      	ldr	r2, [pc, #292]	; (80011b4 <HAL_GPIO_Init+0x320>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x202>
 8001092:	2306      	movs	r3, #6
 8001094:	e00c      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 8001096:	2307      	movs	r3, #7
 8001098:	e00a      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 800109a:	2305      	movs	r3, #5
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 800109e:	2304      	movs	r3, #4
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x21c>
 80010ae:	2300      	movs	r3, #0
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c0:	4935      	ldr	r1, [pc, #212]	; (8001198 <HAL_GPIO_Init+0x304>)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <HAL_GPIO_Init+0x324>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f2:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <HAL_GPIO_Init+0x324>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <HAL_GPIO_Init+0x324>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800111c:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <HAL_GPIO_Init+0x324>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_GPIO_Init+0x324>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001146:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <HAL_GPIO_Init+0x324>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <HAL_GPIO_Init+0x324>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001170:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <HAL_GPIO_Init+0x324>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3301      	adds	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	f67f ae96 	bls.w	8000eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40013800 	.word	0x40013800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40021800 	.word	0x40021800
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e001      	b.n	80011de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	619a      	str	r2, [r3, #24]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e0cc      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001234:	4b68      	ldr	r3, [pc, #416]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 030f 	and.w	r3, r3, #15
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d90c      	bls.n	800125c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001242:	4b65      	ldr	r3, [pc, #404]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800124a:	4b63      	ldr	r3, [pc, #396]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0b8      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d020      	beq.n	80012aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001274:	4b59      	ldr	r3, [pc, #356]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	4a58      	ldr	r2, [pc, #352]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800127e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	2b00      	cmp	r3, #0
 800128a:	d005      	beq.n	8001298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800128c:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	4a52      	ldr	r2, [pc, #328]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001298:	4b50      	ldr	r3, [pc, #320]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	494d      	ldr	r1, [pc, #308]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d044      	beq.n	8001340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d107      	bne.n	80012ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d119      	bne.n	80012fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e07f      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d003      	beq.n	80012de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d107      	bne.n	80012ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012de:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d109      	bne.n	80012fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e06f      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ee:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e067      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012fe:	4b37      	ldr	r3, [pc, #220]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f023 0203 	bic.w	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4934      	ldr	r1, [pc, #208]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800130c:	4313      	orrs	r3, r2
 800130e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001310:	f7ff fcd2 	bl	8000cb8 <HAL_GetTick>
 8001314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001316:	e00a      	b.n	800132e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001318:	f7ff fcce 	bl	8000cb8 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f241 3288 	movw	r2, #5000	; 0x1388
 8001326:	4293      	cmp	r3, r2
 8001328:	d901      	bls.n	800132e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e04f      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132e:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 020c 	and.w	r2, r3, #12
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	429a      	cmp	r2, r3
 800133e:	d1eb      	bne.n	8001318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d20c      	bcs.n	8001368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134e:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d001      	beq.n	8001368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e032      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	4916      	ldr	r1, [pc, #88]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	4313      	orrs	r3, r2
 8001384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d009      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	490e      	ldr	r1, [pc, #56]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013a6:	f000 f887 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	490a      	ldr	r1, [pc, #40]	; (80013e0 <HAL_RCC_ClockConfig+0x1c0>)
 80013b8:	5ccb      	ldrb	r3, [r1, r3]
 80013ba:	fa22 f303 	lsr.w	r3, r2, r3
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 80013c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_RCC_ClockConfig+0x1c8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fb72 	bl	8000ab0 <HAL_InitTick>

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023c00 	.word	0x40023c00
 80013dc:	40023800 	.word	0x40023800
 80013e0:	08005474 	.word	0x08005474
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000004 	.word	0x20000004

080013ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_RCC_GetHCLKFreq+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000000 	.word	0x20000000

08001404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001408:	f7ff fff0 	bl	80013ec <HAL_RCC_GetHCLKFreq>
 800140c:	4602      	mov	r2, r0
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	0a9b      	lsrs	r3, r3, #10
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	4903      	ldr	r1, [pc, #12]	; (8001428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800141a:	5ccb      	ldrb	r3, [r1, r3]
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001420:	4618      	mov	r0, r3
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	08005484 	.word	0x08005484

0800142c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001430:	f7ff ffdc 	bl	80013ec <HAL_RCC_GetHCLKFreq>
 8001434:	4602      	mov	r2, r0
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	0b5b      	lsrs	r3, r3, #13
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	4903      	ldr	r1, [pc, #12]	; (8001450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001442:	5ccb      	ldrb	r3, [r1, r3]
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001448:	4618      	mov	r0, r3
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	08005484 	.word	0x08005484

08001454 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	220f      	movs	r2, #15
 8001462:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0203 	and.w	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_RCC_GetClockConfig+0x5c>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_RCC_GetClockConfig+0x5c>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	08db      	lsrs	r3, r3, #3
 800148e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <HAL_RCC_GetClockConfig+0x60>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 020f 	and.w	r2, r3, #15
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	601a      	str	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40023c00 	.word	0x40023c00

080014b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014bc:	b0ae      	sub	sp, #184	; 0xb8
 80014be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014de:	4bcb      	ldr	r3, [pc, #812]	; (800180c <HAL_RCC_GetSysClockFreq+0x354>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b0c      	cmp	r3, #12
 80014e8:	f200 8206 	bhi.w	80018f8 <HAL_RCC_GetSysClockFreq+0x440>
 80014ec:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80014ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f2:	bf00      	nop
 80014f4:	08001529 	.word	0x08001529
 80014f8:	080018f9 	.word	0x080018f9
 80014fc:	080018f9 	.word	0x080018f9
 8001500:	080018f9 	.word	0x080018f9
 8001504:	08001531 	.word	0x08001531
 8001508:	080018f9 	.word	0x080018f9
 800150c:	080018f9 	.word	0x080018f9
 8001510:	080018f9 	.word	0x080018f9
 8001514:	08001539 	.word	0x08001539
 8001518:	080018f9 	.word	0x080018f9
 800151c:	080018f9 	.word	0x080018f9
 8001520:	080018f9 	.word	0x080018f9
 8001524:	08001729 	.word	0x08001729
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001528:	4bb9      	ldr	r3, [pc, #740]	; (8001810 <HAL_RCC_GetSysClockFreq+0x358>)
 800152a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800152e:	e1e7      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001530:	4bb8      	ldr	r3, [pc, #736]	; (8001814 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001536:	e1e3      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001538:	4bb4      	ldr	r3, [pc, #720]	; (800180c <HAL_RCC_GetSysClockFreq+0x354>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001544:	4bb1      	ldr	r3, [pc, #708]	; (800180c <HAL_RCC_GetSysClockFreq+0x354>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d071      	beq.n	8001634 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001550:	4bae      	ldr	r3, [pc, #696]	; (800180c <HAL_RCC_GetSysClockFreq+0x354>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	099b      	lsrs	r3, r3, #6
 8001556:	2200      	movs	r2, #0
 8001558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800155c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001560:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001568:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001572:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001576:	4622      	mov	r2, r4
 8001578:	462b      	mov	r3, r5
 800157a:	f04f 0000 	mov.w	r0, #0
 800157e:	f04f 0100 	mov.w	r1, #0
 8001582:	0159      	lsls	r1, r3, #5
 8001584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001588:	0150      	lsls	r0, r2, #5
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4621      	mov	r1, r4
 8001590:	1a51      	subs	r1, r2, r1
 8001592:	6439      	str	r1, [r7, #64]	; 0x40
 8001594:	4629      	mov	r1, r5
 8001596:	eb63 0301 	sbc.w	r3, r3, r1
 800159a:	647b      	str	r3, [r7, #68]	; 0x44
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80015a8:	4649      	mov	r1, r9
 80015aa:	018b      	lsls	r3, r1, #6
 80015ac:	4641      	mov	r1, r8
 80015ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015b2:	4641      	mov	r1, r8
 80015b4:	018a      	lsls	r2, r1, #6
 80015b6:	4641      	mov	r1, r8
 80015b8:	1a51      	subs	r1, r2, r1
 80015ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80015bc:	4649      	mov	r1, r9
 80015be:	eb63 0301 	sbc.w	r3, r3, r1
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80015d0:	4649      	mov	r1, r9
 80015d2:	00cb      	lsls	r3, r1, #3
 80015d4:	4641      	mov	r1, r8
 80015d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015da:	4641      	mov	r1, r8
 80015dc:	00ca      	lsls	r2, r1, #3
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	4603      	mov	r3, r0
 80015e4:	4622      	mov	r2, r4
 80015e6:	189b      	adds	r3, r3, r2
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
 80015ea:	462b      	mov	r3, r5
 80015ec:	460a      	mov	r2, r1
 80015ee:	eb42 0303 	adc.w	r3, r2, r3
 80015f2:	637b      	str	r3, [r7, #52]	; 0x34
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001600:	4629      	mov	r1, r5
 8001602:	024b      	lsls	r3, r1, #9
 8001604:	4621      	mov	r1, r4
 8001606:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800160a:	4621      	mov	r1, r4
 800160c:	024a      	lsls	r2, r1, #9
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001616:	2200      	movs	r2, #0
 8001618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800161c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001620:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001624:	f7fe fdfc 	bl	8000220 <__aeabi_uldivmod>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4613      	mov	r3, r2
 800162e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001632:	e067      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001634:	4b75      	ldr	r3, [pc, #468]	; (800180c <HAL_RCC_GetSysClockFreq+0x354>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	099b      	lsrs	r3, r3, #6
 800163a:	2200      	movs	r2, #0
 800163c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001640:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001644:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800164c:	67bb      	str	r3, [r7, #120]	; 0x78
 800164e:	2300      	movs	r3, #0
 8001650:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001652:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001656:	4622      	mov	r2, r4
 8001658:	462b      	mov	r3, r5
 800165a:	f04f 0000 	mov.w	r0, #0
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	0159      	lsls	r1, r3, #5
 8001664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001668:	0150      	lsls	r0, r2, #5
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4621      	mov	r1, r4
 8001670:	1a51      	subs	r1, r2, r1
 8001672:	62b9      	str	r1, [r7, #40]	; 0x28
 8001674:	4629      	mov	r1, r5
 8001676:	eb63 0301 	sbc.w	r3, r3, r1
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001688:	4649      	mov	r1, r9
 800168a:	018b      	lsls	r3, r1, #6
 800168c:	4641      	mov	r1, r8
 800168e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001692:	4641      	mov	r1, r8
 8001694:	018a      	lsls	r2, r1, #6
 8001696:	4641      	mov	r1, r8
 8001698:	ebb2 0a01 	subs.w	sl, r2, r1
 800169c:	4649      	mov	r1, r9
 800169e:	eb63 0b01 	sbc.w	fp, r3, r1
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016b6:	4692      	mov	sl, r2
 80016b8:	469b      	mov	fp, r3
 80016ba:	4623      	mov	r3, r4
 80016bc:	eb1a 0303 	adds.w	r3, sl, r3
 80016c0:	623b      	str	r3, [r7, #32]
 80016c2:	462b      	mov	r3, r5
 80016c4:	eb4b 0303 	adc.w	r3, fp, r3
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016d6:	4629      	mov	r1, r5
 80016d8:	028b      	lsls	r3, r1, #10
 80016da:	4621      	mov	r1, r4
 80016dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016e0:	4621      	mov	r1, r4
 80016e2:	028a      	lsls	r2, r1, #10
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016ec:	2200      	movs	r2, #0
 80016ee:	673b      	str	r3, [r7, #112]	; 0x70
 80016f0:	677a      	str	r2, [r7, #116]	; 0x74
 80016f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80016f6:	f7fe fd93 	bl	8000220 <__aeabi_uldivmod>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4613      	mov	r3, r2
 8001700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001704:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_RCC_GetSysClockFreq+0x354>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	0c1b      	lsrs	r3, r3, #16
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	3301      	adds	r3, #1
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001716:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800171a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001726:	e0eb      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001728:	4b38      	ldr	r3, [pc, #224]	; (800180c <HAL_RCC_GetSysClockFreq+0x354>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001730:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001734:	4b35      	ldr	r3, [pc, #212]	; (800180c <HAL_RCC_GetSysClockFreq+0x354>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d06b      	beq.n	8001818 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001740:	4b32      	ldr	r3, [pc, #200]	; (800180c <HAL_RCC_GetSysClockFreq+0x354>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	099b      	lsrs	r3, r3, #6
 8001746:	2200      	movs	r2, #0
 8001748:	66bb      	str	r3, [r7, #104]	; 0x68
 800174a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800174c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800174e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001752:	663b      	str	r3, [r7, #96]	; 0x60
 8001754:	2300      	movs	r3, #0
 8001756:	667b      	str	r3, [r7, #100]	; 0x64
 8001758:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800175c:	4622      	mov	r2, r4
 800175e:	462b      	mov	r3, r5
 8001760:	f04f 0000 	mov.w	r0, #0
 8001764:	f04f 0100 	mov.w	r1, #0
 8001768:	0159      	lsls	r1, r3, #5
 800176a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800176e:	0150      	lsls	r0, r2, #5
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4621      	mov	r1, r4
 8001776:	1a51      	subs	r1, r2, r1
 8001778:	61b9      	str	r1, [r7, #24]
 800177a:	4629      	mov	r1, r5
 800177c:	eb63 0301 	sbc.w	r3, r3, r1
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800178e:	4659      	mov	r1, fp
 8001790:	018b      	lsls	r3, r1, #6
 8001792:	4651      	mov	r1, sl
 8001794:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001798:	4651      	mov	r1, sl
 800179a:	018a      	lsls	r2, r1, #6
 800179c:	4651      	mov	r1, sl
 800179e:	ebb2 0801 	subs.w	r8, r2, r1
 80017a2:	4659      	mov	r1, fp
 80017a4:	eb63 0901 	sbc.w	r9, r3, r1
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017bc:	4690      	mov	r8, r2
 80017be:	4699      	mov	r9, r3
 80017c0:	4623      	mov	r3, r4
 80017c2:	eb18 0303 	adds.w	r3, r8, r3
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	462b      	mov	r3, r5
 80017ca:	eb49 0303 	adc.w	r3, r9, r3
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017dc:	4629      	mov	r1, r5
 80017de:	024b      	lsls	r3, r1, #9
 80017e0:	4621      	mov	r1, r4
 80017e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017e6:	4621      	mov	r1, r4
 80017e8:	024a      	lsls	r2, r1, #9
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017f2:	2200      	movs	r2, #0
 80017f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80017f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80017f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017fc:	f7fe fd10 	bl	8000220 <__aeabi_uldivmod>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4613      	mov	r3, r2
 8001806:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800180a:	e065      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x420>
 800180c:	40023800 	.word	0x40023800
 8001810:	00f42400 	.word	0x00f42400
 8001814:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001818:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <HAL_RCC_GetSysClockFreq+0x458>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	099b      	lsrs	r3, r3, #6
 800181e:	2200      	movs	r2, #0
 8001820:	4618      	mov	r0, r3
 8001822:	4611      	mov	r1, r2
 8001824:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001828:	653b      	str	r3, [r7, #80]	; 0x50
 800182a:	2300      	movs	r3, #0
 800182c:	657b      	str	r3, [r7, #84]	; 0x54
 800182e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001832:	4642      	mov	r2, r8
 8001834:	464b      	mov	r3, r9
 8001836:	f04f 0000 	mov.w	r0, #0
 800183a:	f04f 0100 	mov.w	r1, #0
 800183e:	0159      	lsls	r1, r3, #5
 8001840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001844:	0150      	lsls	r0, r2, #5
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4641      	mov	r1, r8
 800184c:	1a51      	subs	r1, r2, r1
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	4649      	mov	r1, r9
 8001852:	eb63 0301 	sbc.w	r3, r3, r1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001864:	4659      	mov	r1, fp
 8001866:	018b      	lsls	r3, r1, #6
 8001868:	4651      	mov	r1, sl
 800186a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800186e:	4651      	mov	r1, sl
 8001870:	018a      	lsls	r2, r1, #6
 8001872:	4651      	mov	r1, sl
 8001874:	1a54      	subs	r4, r2, r1
 8001876:	4659      	mov	r1, fp
 8001878:	eb63 0501 	sbc.w	r5, r3, r1
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	00eb      	lsls	r3, r5, #3
 8001886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800188a:	00e2      	lsls	r2, r4, #3
 800188c:	4614      	mov	r4, r2
 800188e:	461d      	mov	r5, r3
 8001890:	4643      	mov	r3, r8
 8001892:	18e3      	adds	r3, r4, r3
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	464b      	mov	r3, r9
 8001898:	eb45 0303 	adc.w	r3, r5, r3
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018aa:	4629      	mov	r1, r5
 80018ac:	028b      	lsls	r3, r1, #10
 80018ae:	4621      	mov	r1, r4
 80018b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018b4:	4621      	mov	r1, r4
 80018b6:	028a      	lsls	r2, r1, #10
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018c0:	2200      	movs	r2, #0
 80018c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80018c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80018c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018ca:	f7fe fca9 	bl	8000220 <__aeabi_uldivmod>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4613      	mov	r3, r2
 80018d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_RCC_GetSysClockFreq+0x458>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	0f1b      	lsrs	r3, r3, #28
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80018e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80018ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018f6:	e003      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_RCC_GetSysClockFreq+0x45c>)
 80018fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001900:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001904:	4618      	mov	r0, r3
 8001906:	37b8      	adds	r7, #184	; 0xb8
 8001908:	46bd      	mov	sp, r7
 800190a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	00f42400 	.word	0x00f42400

08001918 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e28d      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8083 	beq.w	8001a3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001938:	4b94      	ldr	r3, [pc, #592]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b04      	cmp	r3, #4
 8001942:	d019      	beq.n	8001978 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001944:	4b91      	ldr	r3, [pc, #580]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800194c:	2b08      	cmp	r3, #8
 800194e:	d106      	bne.n	800195e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001950:	4b8e      	ldr	r3, [pc, #568]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800195c:	d00c      	beq.n	8001978 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800195e:	4b8b      	ldr	r3, [pc, #556]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d112      	bne.n	8001990 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800196a:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001976:	d10b      	bne.n	8001990 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	4b84      	ldr	r3, [pc, #528]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d05b      	beq.n	8001a3c <HAL_RCC_OscConfig+0x124>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d157      	bne.n	8001a3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e25a      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001998:	d106      	bne.n	80019a8 <HAL_RCC_OscConfig+0x90>
 800199a:	4b7c      	ldr	r3, [pc, #496]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a7b      	ldr	r2, [pc, #492]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e01d      	b.n	80019e4 <HAL_RCC_OscConfig+0xcc>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0xb4>
 80019b2:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a75      	ldr	r2, [pc, #468]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 80019b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a72      	ldr	r2, [pc, #456]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 80019c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e00b      	b.n	80019e4 <HAL_RCC_OscConfig+0xcc>
 80019cc:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a6e      	ldr	r2, [pc, #440]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 80019d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b6c      	ldr	r3, [pc, #432]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a6b      	ldr	r2, [pc, #428]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 80019de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d013      	beq.n	8001a14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff f964 	bl	8000cb8 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f4:	f7ff f960 	bl	8000cb8 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b64      	cmp	r3, #100	; 0x64
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e21f      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b61      	ldr	r3, [pc, #388]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0xdc>
 8001a12:	e014      	b.n	8001a3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff f950 	bl	8000cb8 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff f94c 	bl	8000cb8 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e20b      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2e:	4b57      	ldr	r3, [pc, #348]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x104>
 8001a3a:	e000      	b.n	8001a3e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d06f      	beq.n	8001b2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a4a:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d017      	beq.n	8001a86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a56:	4b4d      	ldr	r3, [pc, #308]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d105      	bne.n	8001a6e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a62:	4b4a      	ldr	r3, [pc, #296]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a6e:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d11c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7a:	4b44      	ldr	r3, [pc, #272]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d116      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a86:	4b41      	ldr	r3, [pc, #260]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <HAL_RCC_OscConfig+0x186>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d001      	beq.n	8001a9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e1d3      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4937      	ldr	r1, [pc, #220]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	e03a      	b.n	8001b2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001abc:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <HAL_RCC_OscConfig+0x278>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f7ff f8f9 	bl	8000cb8 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aca:	f7ff f8f5 	bl	8000cb8 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e1b4      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4925      	ldr	r1, [pc, #148]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]
 8001afc:	e015      	b.n	8001b2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afe:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <HAL_RCC_OscConfig+0x278>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff f8d8 	bl	8000cb8 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff f8d4 	bl	8000cb8 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e193      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d036      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d016      	beq.n	8001b6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_RCC_OscConfig+0x27c>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b44:	f7ff f8b8 	bl	8000cb8 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7ff f8b4 	bl	8000cb8 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e173      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_RCC_OscConfig+0x274>)
 8001b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x234>
 8001b6a:	e01b      	b.n	8001ba4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_RCC_OscConfig+0x27c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff f8a1 	bl	8000cb8 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b78:	e00e      	b.n	8001b98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff f89d 	bl	8000cb8 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d907      	bls.n	8001b98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e15c      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	42470000 	.word	0x42470000
 8001b94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b98:	4b8a      	ldr	r3, [pc, #552]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1ea      	bne.n	8001b7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 8097 	beq.w	8001ce0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb6:	4b83      	ldr	r3, [pc, #524]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10f      	bne.n	8001be2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	4b7f      	ldr	r3, [pc, #508]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	4a7e      	ldr	r2, [pc, #504]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd2:	4b7c      	ldr	r3, [pc, #496]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bde:	2301      	movs	r3, #1
 8001be0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be2:	4b79      	ldr	r3, [pc, #484]	; (8001dc8 <HAL_RCC_OscConfig+0x4b0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d118      	bne.n	8001c20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bee:	4b76      	ldr	r3, [pc, #472]	; (8001dc8 <HAL_RCC_OscConfig+0x4b0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a75      	ldr	r2, [pc, #468]	; (8001dc8 <HAL_RCC_OscConfig+0x4b0>)
 8001bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfa:	f7ff f85d 	bl	8000cb8 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c02:	f7ff f859 	bl	8000cb8 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e118      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c14:	4b6c      	ldr	r3, [pc, #432]	; (8001dc8 <HAL_RCC_OscConfig+0x4b0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x31e>
 8001c28:	4b66      	ldr	r3, [pc, #408]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2c:	4a65      	ldr	r2, [pc, #404]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6713      	str	r3, [r2, #112]	; 0x70
 8001c34:	e01c      	b.n	8001c70 <HAL_RCC_OscConfig+0x358>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b05      	cmp	r3, #5
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x340>
 8001c3e:	4b61      	ldr	r3, [pc, #388]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c42:	4a60      	ldr	r2, [pc, #384]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4a:	4b5e      	ldr	r3, [pc, #376]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4e:	4a5d      	ldr	r2, [pc, #372]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6713      	str	r3, [r2, #112]	; 0x70
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0x358>
 8001c58:	4b5a      	ldr	r3, [pc, #360]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5c:	4a59      	ldr	r2, [pc, #356]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	6713      	str	r3, [r2, #112]	; 0x70
 8001c64:	4b57      	ldr	r3, [pc, #348]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	4a56      	ldr	r2, [pc, #344]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c6a:	f023 0304 	bic.w	r3, r3, #4
 8001c6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d015      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c78:	f7ff f81e 	bl	8000cb8 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c80:	f7ff f81a 	bl	8000cb8 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e0d7      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c96:	4b4b      	ldr	r3, [pc, #300]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0ee      	beq.n	8001c80 <HAL_RCC_OscConfig+0x368>
 8001ca2:	e014      	b.n	8001cce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f808 	bl	8000cb8 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cac:	f7ff f804 	bl	8000cb8 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e0c1      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc2:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1ee      	bne.n	8001cac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d105      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd4:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	4a3a      	ldr	r2, [pc, #232]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80ad 	beq.w	8001e44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d060      	beq.n	8001db8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d145      	bne.n	8001d8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfe:	4b33      	ldr	r3, [pc, #204]	; (8001dcc <HAL_RCC_OscConfig+0x4b4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7fe ffd8 	bl	8000cb8 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7fe ffd4 	bl	8000cb8 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e093      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1e:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69da      	ldr	r2, [r3, #28]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	019b      	lsls	r3, r3, #6
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	085b      	lsrs	r3, r3, #1
 8001d42:	3b01      	subs	r3, #1
 8001d44:	041b      	lsls	r3, r3, #16
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	061b      	lsls	r3, r3, #24
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	071b      	lsls	r3, r3, #28
 8001d56:	491b      	ldr	r1, [pc, #108]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_RCC_OscConfig+0x4b4>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7fe ffa9 	bl	8000cb8 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7fe ffa5 	bl	8000cb8 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e064      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x452>
 8001d88:	e05c      	b.n	8001e44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <HAL_RCC_OscConfig+0x4b4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7fe ff92 	bl	8000cb8 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d98:	f7fe ff8e 	bl	8000cb8 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e04d      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_RCC_OscConfig+0x4ac>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x480>
 8001db6:	e045      	b.n	8001e44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d107      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e040      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <HAL_RCC_OscConfig+0x538>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d030      	beq.n	8001e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d129      	bne.n	8001e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d122      	bne.n	8001e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e00:	4013      	ands	r3, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d119      	bne.n	8001e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	085b      	lsrs	r3, r3, #1
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d10f      	bne.n	8001e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800

08001e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e041      	b.n	8001eea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d106      	bne.n	8001e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f839 	bl	8001ef2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f000 f9d8 	bl	8002248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d001      	beq.n	8001f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e04e      	b.n	8001fbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <HAL_TIM_Base_Start_IT+0xc4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d022      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0x80>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4a:	d01d      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0x80>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1f      	ldr	r2, [pc, #124]	; (8001fd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d018      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0x80>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0x80>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00e      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0x80>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <HAL_TIM_Base_Start_IT+0xd4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d009      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0x80>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a19      	ldr	r2, [pc, #100]	; (8001fe0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d004      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0x80>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a18      	ldr	r2, [pc, #96]	; (8001fe4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d111      	bne.n	8001fac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b06      	cmp	r3, #6
 8001f98:	d010      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0201 	orr.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001faa:	e007      	b.n	8001fbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	40000800 	.word	0x40000800
 8001fd8:	40000c00 	.word	0x40000c00
 8001fdc:	40010400 	.word	0x40010400
 8001fe0:	40014000 	.word	0x40014000
 8001fe4:	40001800 	.word	0x40001800

08001fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d122      	bne.n	8002044 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b02      	cmp	r3, #2
 800200a:	d11b      	bne.n	8002044 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0202 	mvn.w	r2, #2
 8002014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f8ee 	bl	800220c <HAL_TIM_IC_CaptureCallback>
 8002030:	e005      	b.n	800203e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f8e0 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f8f1 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b04      	cmp	r3, #4
 8002050:	d122      	bne.n	8002098 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b04      	cmp	r3, #4
 800205e:	d11b      	bne.n	8002098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0204 	mvn.w	r2, #4
 8002068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2202      	movs	r2, #2
 800206e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8c4 	bl	800220c <HAL_TIM_IC_CaptureCallback>
 8002084:	e005      	b.n	8002092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8b6 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f8c7 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d122      	bne.n	80020ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d11b      	bne.n	80020ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0208 	mvn.w	r2, #8
 80020bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2204      	movs	r2, #4
 80020c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f89a 	bl	800220c <HAL_TIM_IC_CaptureCallback>
 80020d8:	e005      	b.n	80020e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f88c 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f89d 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b10      	cmp	r3, #16
 80020f8:	d122      	bne.n	8002140 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b10      	cmp	r3, #16
 8002106:	d11b      	bne.n	8002140 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0210 	mvn.w	r2, #16
 8002110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2208      	movs	r2, #8
 8002116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f870 	bl	800220c <HAL_TIM_IC_CaptureCallback>
 800212c:	e005      	b.n	800213a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f862 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f873 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d10e      	bne.n	800216c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0201 	mvn.w	r2, #1
 8002164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7fe fc16 	bl	8000998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002176:	2b80      	cmp	r3, #128	; 0x80
 8002178:	d10e      	bne.n	8002198 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002184:	2b80      	cmp	r3, #128	; 0x80
 8002186:	d107      	bne.n	8002198 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f902 	bl	800239c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a2:	2b40      	cmp	r3, #64	; 0x40
 80021a4:	d10e      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b0:	2b40      	cmp	r3, #64	; 0x40
 80021b2:	d107      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f838 	bl	8002234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f003 0320 	and.w	r3, r3, #32
 80021ce:	2b20      	cmp	r3, #32
 80021d0:	d10e      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d107      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0220 	mvn.w	r2, #32
 80021e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f8cc 	bl	8002388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a40      	ldr	r2, [pc, #256]	; (800235c <TIM_Base_SetConfig+0x114>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d013      	beq.n	8002288 <TIM_Base_SetConfig+0x40>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002266:	d00f      	beq.n	8002288 <TIM_Base_SetConfig+0x40>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a3d      	ldr	r2, [pc, #244]	; (8002360 <TIM_Base_SetConfig+0x118>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00b      	beq.n	8002288 <TIM_Base_SetConfig+0x40>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a3c      	ldr	r2, [pc, #240]	; (8002364 <TIM_Base_SetConfig+0x11c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d007      	beq.n	8002288 <TIM_Base_SetConfig+0x40>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a3b      	ldr	r2, [pc, #236]	; (8002368 <TIM_Base_SetConfig+0x120>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d003      	beq.n	8002288 <TIM_Base_SetConfig+0x40>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a3a      	ldr	r2, [pc, #232]	; (800236c <TIM_Base_SetConfig+0x124>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d108      	bne.n	800229a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a2f      	ldr	r2, [pc, #188]	; (800235c <TIM_Base_SetConfig+0x114>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d02b      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a8:	d027      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a2c      	ldr	r2, [pc, #176]	; (8002360 <TIM_Base_SetConfig+0x118>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d023      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a2b      	ldr	r2, [pc, #172]	; (8002364 <TIM_Base_SetConfig+0x11c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01f      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a2a      	ldr	r2, [pc, #168]	; (8002368 <TIM_Base_SetConfig+0x120>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01b      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a29      	ldr	r2, [pc, #164]	; (800236c <TIM_Base_SetConfig+0x124>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d017      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a28      	ldr	r2, [pc, #160]	; (8002370 <TIM_Base_SetConfig+0x128>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a27      	ldr	r2, [pc, #156]	; (8002374 <TIM_Base_SetConfig+0x12c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00f      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a26      	ldr	r2, [pc, #152]	; (8002378 <TIM_Base_SetConfig+0x130>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00b      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a25      	ldr	r2, [pc, #148]	; (800237c <TIM_Base_SetConfig+0x134>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d007      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a24      	ldr	r2, [pc, #144]	; (8002380 <TIM_Base_SetConfig+0x138>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d003      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a23      	ldr	r2, [pc, #140]	; (8002384 <TIM_Base_SetConfig+0x13c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d108      	bne.n	800230c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <TIM_Base_SetConfig+0x114>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d003      	beq.n	8002340 <TIM_Base_SetConfig+0xf8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a0c      	ldr	r2, [pc, #48]	; (800236c <TIM_Base_SetConfig+0x124>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d103      	bne.n	8002348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	615a      	str	r2, [r3, #20]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40010000 	.word	0x40010000
 8002360:	40000400 	.word	0x40000400
 8002364:	40000800 	.word	0x40000800
 8002368:	40000c00 	.word	0x40000c00
 800236c:	40010400 	.word	0x40010400
 8002370:	40014000 	.word	0x40014000
 8002374:	40014400 	.word	0x40014400
 8002378:	40014800 	.word	0x40014800
 800237c:	40001800 	.word	0x40001800
 8002380:	40001c00 	.word	0x40001c00
 8002384:	40002000 	.word	0x40002000

08002388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e03f      	b.n	8002442 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7fe fb22 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2224      	movs	r2, #36	; 0x24
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f929 	bl	800264c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002408:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002418:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002428:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b08a      	sub	sp, #40	; 0x28
 800244e:	af02      	add	r7, sp, #8
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b20      	cmp	r3, #32
 8002468:	d17c      	bne.n	8002564 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_UART_Transmit+0x2c>
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e075      	b.n	8002566 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_UART_Transmit+0x3e>
 8002484:	2302      	movs	r3, #2
 8002486:	e06e      	b.n	8002566 <HAL_UART_Transmit+0x11c>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2221      	movs	r2, #33	; 0x21
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800249e:	f7fe fc0b 	bl	8000cb8 <HAL_GetTick>
 80024a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	88fa      	ldrh	r2, [r7, #6]
 80024a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	88fa      	ldrh	r2, [r7, #6]
 80024ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b8:	d108      	bne.n	80024cc <HAL_UART_Transmit+0x82>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d104      	bne.n	80024cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	e003      	b.n	80024d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024dc:	e02a      	b.n	8002534 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2200      	movs	r2, #0
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 f840 	bl	800256e <UART_WaitOnFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e036      	b.n	8002566 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10b      	bne.n	8002516 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800250c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	3302      	adds	r3, #2
 8002512:	61bb      	str	r3, [r7, #24]
 8002514:	e007      	b.n	8002526 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	3301      	adds	r3, #1
 8002524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1cf      	bne.n	80024de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2200      	movs	r2, #0
 8002546:	2140      	movs	r1, #64	; 0x40
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f810 	bl	800256e <UART_WaitOnFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e006      	b.n	8002566 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	e000      	b.n	8002566 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002564:	2302      	movs	r3, #2
  }
}
 8002566:	4618      	mov	r0, r3
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b090      	sub	sp, #64	; 0x40
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	603b      	str	r3, [r7, #0]
 800257a:	4613      	mov	r3, r2
 800257c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800257e:	e050      	b.n	8002622 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002586:	d04c      	beq.n	8002622 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <UART_WaitOnFlagUntilTimeout+0x30>
 800258e:	f7fe fb93 	bl	8000cb8 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800259a:	429a      	cmp	r2, r3
 800259c:	d241      	bcs.n	8002622 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	330c      	adds	r3, #12
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	e853 3f00 	ldrex	r3, [r3]
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80025b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	330c      	adds	r3, #12
 80025bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025be:	637a      	str	r2, [r7, #52]	; 0x34
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025c6:	e841 2300 	strex	r3, r2, [r1]
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1e5      	bne.n	800259e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3314      	adds	r3, #20
 80025d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	e853 3f00 	ldrex	r3, [r3]
 80025e0:	613b      	str	r3, [r7, #16]
   return(result);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3314      	adds	r3, #20
 80025f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025f2:	623a      	str	r2, [r7, #32]
 80025f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f6:	69f9      	ldr	r1, [r7, #28]
 80025f8:	6a3a      	ldr	r2, [r7, #32]
 80025fa:	e841 2300 	strex	r3, r2, [r1]
 80025fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1e5      	bne.n	80025d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e00f      	b.n	8002642 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4013      	ands	r3, r2
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	429a      	cmp	r2, r3
 8002630:	bf0c      	ite	eq
 8002632:	2301      	moveq	r3, #1
 8002634:	2300      	movne	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	429a      	cmp	r2, r3
 800263e:	d09f      	beq.n	8002580 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3740      	adds	r7, #64	; 0x40
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800264c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002650:	b0c0      	sub	sp, #256	; 0x100
 8002652:	af00      	add	r7, sp, #0
 8002654:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002668:	68d9      	ldr	r1, [r3, #12]
 800266a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	ea40 0301 	orr.w	r3, r0, r1
 8002674:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	431a      	orrs	r2, r3
 8002684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	431a      	orrs	r2, r3
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026a4:	f021 010c 	bic.w	r1, r1, #12
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026b2:	430b      	orrs	r3, r1
 80026b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80026c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c6:	6999      	ldr	r1, [r3, #24]
 80026c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	ea40 0301 	orr.w	r3, r0, r1
 80026d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4b8f      	ldr	r3, [pc, #572]	; (8002918 <UART_SetConfig+0x2cc>)
 80026dc:	429a      	cmp	r2, r3
 80026de:	d005      	beq.n	80026ec <UART_SetConfig+0xa0>
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4b8d      	ldr	r3, [pc, #564]	; (800291c <UART_SetConfig+0x2d0>)
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d104      	bne.n	80026f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026ec:	f7fe fe9e 	bl	800142c <HAL_RCC_GetPCLK2Freq>
 80026f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80026f4:	e003      	b.n	80026fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026f6:	f7fe fe85 	bl	8001404 <HAL_RCC_GetPCLK1Freq>
 80026fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002708:	f040 810c 	bne.w	8002924 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800270c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002710:	2200      	movs	r2, #0
 8002712:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002716:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800271a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800271e:	4622      	mov	r2, r4
 8002720:	462b      	mov	r3, r5
 8002722:	1891      	adds	r1, r2, r2
 8002724:	65b9      	str	r1, [r7, #88]	; 0x58
 8002726:	415b      	adcs	r3, r3
 8002728:	65fb      	str	r3, [r7, #92]	; 0x5c
 800272a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800272e:	4621      	mov	r1, r4
 8002730:	eb12 0801 	adds.w	r8, r2, r1
 8002734:	4629      	mov	r1, r5
 8002736:	eb43 0901 	adc.w	r9, r3, r1
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800274a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800274e:	4690      	mov	r8, r2
 8002750:	4699      	mov	r9, r3
 8002752:	4623      	mov	r3, r4
 8002754:	eb18 0303 	adds.w	r3, r8, r3
 8002758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800275c:	462b      	mov	r3, r5
 800275e:	eb49 0303 	adc.w	r3, r9, r3
 8002762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002772:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002776:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800277a:	460b      	mov	r3, r1
 800277c:	18db      	adds	r3, r3, r3
 800277e:	653b      	str	r3, [r7, #80]	; 0x50
 8002780:	4613      	mov	r3, r2
 8002782:	eb42 0303 	adc.w	r3, r2, r3
 8002786:	657b      	str	r3, [r7, #84]	; 0x54
 8002788:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800278c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002790:	f7fd fd46 	bl	8000220 <__aeabi_uldivmod>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4b61      	ldr	r3, [pc, #388]	; (8002920 <UART_SetConfig+0x2d4>)
 800279a:	fba3 2302 	umull	r2, r3, r3, r2
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	011c      	lsls	r4, r3, #4
 80027a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027a6:	2200      	movs	r2, #0
 80027a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80027b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80027b4:	4642      	mov	r2, r8
 80027b6:	464b      	mov	r3, r9
 80027b8:	1891      	adds	r1, r2, r2
 80027ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80027bc:	415b      	adcs	r3, r3
 80027be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027c4:	4641      	mov	r1, r8
 80027c6:	eb12 0a01 	adds.w	sl, r2, r1
 80027ca:	4649      	mov	r1, r9
 80027cc:	eb43 0b01 	adc.w	fp, r3, r1
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027e4:	4692      	mov	sl, r2
 80027e6:	469b      	mov	fp, r3
 80027e8:	4643      	mov	r3, r8
 80027ea:	eb1a 0303 	adds.w	r3, sl, r3
 80027ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027f2:	464b      	mov	r3, r9
 80027f4:	eb4b 0303 	adc.w	r3, fp, r3
 80027f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002808:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800280c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002810:	460b      	mov	r3, r1
 8002812:	18db      	adds	r3, r3, r3
 8002814:	643b      	str	r3, [r7, #64]	; 0x40
 8002816:	4613      	mov	r3, r2
 8002818:	eb42 0303 	adc.w	r3, r2, r3
 800281c:	647b      	str	r3, [r7, #68]	; 0x44
 800281e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002822:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002826:	f7fd fcfb 	bl	8000220 <__aeabi_uldivmod>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4611      	mov	r1, r2
 8002830:	4b3b      	ldr	r3, [pc, #236]	; (8002920 <UART_SetConfig+0x2d4>)
 8002832:	fba3 2301 	umull	r2, r3, r3, r1
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	2264      	movs	r2, #100	; 0x64
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	1acb      	subs	r3, r1, r3
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002846:	4b36      	ldr	r3, [pc, #216]	; (8002920 <UART_SetConfig+0x2d4>)
 8002848:	fba3 2302 	umull	r2, r3, r3, r2
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002854:	441c      	add	r4, r3
 8002856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800285a:	2200      	movs	r2, #0
 800285c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002860:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002864:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002868:	4642      	mov	r2, r8
 800286a:	464b      	mov	r3, r9
 800286c:	1891      	adds	r1, r2, r2
 800286e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002870:	415b      	adcs	r3, r3
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002878:	4641      	mov	r1, r8
 800287a:	1851      	adds	r1, r2, r1
 800287c:	6339      	str	r1, [r7, #48]	; 0x30
 800287e:	4649      	mov	r1, r9
 8002880:	414b      	adcs	r3, r1
 8002882:	637b      	str	r3, [r7, #52]	; 0x34
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002890:	4659      	mov	r1, fp
 8002892:	00cb      	lsls	r3, r1, #3
 8002894:	4651      	mov	r1, sl
 8002896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800289a:	4651      	mov	r1, sl
 800289c:	00ca      	lsls	r2, r1, #3
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	4603      	mov	r3, r0
 80028a4:	4642      	mov	r2, r8
 80028a6:	189b      	adds	r3, r3, r2
 80028a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028ac:	464b      	mov	r3, r9
 80028ae:	460a      	mov	r2, r1
 80028b0:	eb42 0303 	adc.w	r3, r2, r3
 80028b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80028c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80028c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80028cc:	460b      	mov	r3, r1
 80028ce:	18db      	adds	r3, r3, r3
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d2:	4613      	mov	r3, r2
 80028d4:	eb42 0303 	adc.w	r3, r2, r3
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80028e2:	f7fd fc9d 	bl	8000220 <__aeabi_uldivmod>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <UART_SetConfig+0x2d4>)
 80028ec:	fba3 1302 	umull	r1, r3, r3, r2
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	2164      	movs	r1, #100	; 0x64
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	3332      	adds	r3, #50	; 0x32
 80028fe:	4a08      	ldr	r2, [pc, #32]	; (8002920 <UART_SetConfig+0x2d4>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	f003 0207 	and.w	r2, r3, #7
 800290a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4422      	add	r2, r4
 8002912:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002914:	e105      	b.n	8002b22 <UART_SetConfig+0x4d6>
 8002916:	bf00      	nop
 8002918:	40011000 	.word	0x40011000
 800291c:	40011400 	.word	0x40011400
 8002920:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002928:	2200      	movs	r2, #0
 800292a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800292e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002932:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002936:	4642      	mov	r2, r8
 8002938:	464b      	mov	r3, r9
 800293a:	1891      	adds	r1, r2, r2
 800293c:	6239      	str	r1, [r7, #32]
 800293e:	415b      	adcs	r3, r3
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
 8002942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002946:	4641      	mov	r1, r8
 8002948:	1854      	adds	r4, r2, r1
 800294a:	4649      	mov	r1, r9
 800294c:	eb43 0501 	adc.w	r5, r3, r1
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	00eb      	lsls	r3, r5, #3
 800295a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800295e:	00e2      	lsls	r2, r4, #3
 8002960:	4614      	mov	r4, r2
 8002962:	461d      	mov	r5, r3
 8002964:	4643      	mov	r3, r8
 8002966:	18e3      	adds	r3, r4, r3
 8002968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800296c:	464b      	mov	r3, r9
 800296e:	eb45 0303 	adc.w	r3, r5, r3
 8002972:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002982:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002992:	4629      	mov	r1, r5
 8002994:	008b      	lsls	r3, r1, #2
 8002996:	4621      	mov	r1, r4
 8002998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800299c:	4621      	mov	r1, r4
 800299e:	008a      	lsls	r2, r1, #2
 80029a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80029a4:	f7fd fc3c 	bl	8000220 <__aeabi_uldivmod>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4b60      	ldr	r3, [pc, #384]	; (8002b30 <UART_SetConfig+0x4e4>)
 80029ae:	fba3 2302 	umull	r2, r3, r3, r2
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	011c      	lsls	r4, r3, #4
 80029b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ba:	2200      	movs	r2, #0
 80029bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80029c8:	4642      	mov	r2, r8
 80029ca:	464b      	mov	r3, r9
 80029cc:	1891      	adds	r1, r2, r2
 80029ce:	61b9      	str	r1, [r7, #24]
 80029d0:	415b      	adcs	r3, r3
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029d8:	4641      	mov	r1, r8
 80029da:	1851      	adds	r1, r2, r1
 80029dc:	6139      	str	r1, [r7, #16]
 80029de:	4649      	mov	r1, r9
 80029e0:	414b      	adcs	r3, r1
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029f0:	4659      	mov	r1, fp
 80029f2:	00cb      	lsls	r3, r1, #3
 80029f4:	4651      	mov	r1, sl
 80029f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029fa:	4651      	mov	r1, sl
 80029fc:	00ca      	lsls	r2, r1, #3
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	4603      	mov	r3, r0
 8002a04:	4642      	mov	r2, r8
 8002a06:	189b      	adds	r3, r3, r2
 8002a08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a0c:	464b      	mov	r3, r9
 8002a0e:	460a      	mov	r2, r1
 8002a10:	eb42 0303 	adc.w	r3, r2, r3
 8002a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a30:	4649      	mov	r1, r9
 8002a32:	008b      	lsls	r3, r1, #2
 8002a34:	4641      	mov	r1, r8
 8002a36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a3a:	4641      	mov	r1, r8
 8002a3c:	008a      	lsls	r2, r1, #2
 8002a3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a42:	f7fd fbed 	bl	8000220 <__aeabi_uldivmod>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4b39      	ldr	r3, [pc, #228]	; (8002b30 <UART_SetConfig+0x4e4>)
 8002a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	2164      	movs	r1, #100	; 0x64
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	3332      	adds	r3, #50	; 0x32
 8002a5e:	4a34      	ldr	r2, [pc, #208]	; (8002b30 <UART_SetConfig+0x4e4>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a6a:	441c      	add	r4, r3
 8002a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a70:	2200      	movs	r2, #0
 8002a72:	673b      	str	r3, [r7, #112]	; 0x70
 8002a74:	677a      	str	r2, [r7, #116]	; 0x74
 8002a76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a7a:	4642      	mov	r2, r8
 8002a7c:	464b      	mov	r3, r9
 8002a7e:	1891      	adds	r1, r2, r2
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	415b      	adcs	r3, r3
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a8a:	4641      	mov	r1, r8
 8002a8c:	1851      	adds	r1, r2, r1
 8002a8e:	6039      	str	r1, [r7, #0]
 8002a90:	4649      	mov	r1, r9
 8002a92:	414b      	adcs	r3, r1
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002aa2:	4659      	mov	r1, fp
 8002aa4:	00cb      	lsls	r3, r1, #3
 8002aa6:	4651      	mov	r1, sl
 8002aa8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aac:	4651      	mov	r1, sl
 8002aae:	00ca      	lsls	r2, r1, #3
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4642      	mov	r2, r8
 8002ab8:	189b      	adds	r3, r3, r2
 8002aba:	66bb      	str	r3, [r7, #104]	; 0x68
 8002abc:	464b      	mov	r3, r9
 8002abe:	460a      	mov	r2, r1
 8002ac0:	eb42 0303 	adc.w	r3, r2, r3
 8002ac4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	663b      	str	r3, [r7, #96]	; 0x60
 8002ad0:	667a      	str	r2, [r7, #100]	; 0x64
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ade:	4649      	mov	r1, r9
 8002ae0:	008b      	lsls	r3, r1, #2
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ae8:	4641      	mov	r1, r8
 8002aea:	008a      	lsls	r2, r1, #2
 8002aec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002af0:	f7fd fb96 	bl	8000220 <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <UART_SetConfig+0x4e4>)
 8002afa:	fba3 1302 	umull	r1, r3, r3, r2
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2164      	movs	r1, #100	; 0x64
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	3332      	adds	r3, #50	; 0x32
 8002b0c:	4a08      	ldr	r2, [pc, #32]	; (8002b30 <UART_SetConfig+0x4e4>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	f003 020f 	and.w	r2, r3, #15
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4422      	add	r2, r4
 8002b20:	609a      	str	r2, [r3, #8]
}
 8002b22:	bf00      	nop
 8002b24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b2e:	bf00      	nop
 8002b30:	51eb851f 	.word	0x51eb851f

08002b34 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b46:	2b84      	cmp	r3, #132	; 0x84
 8002b48:	d005      	beq.n	8002b56 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4413      	add	r3, r2
 8002b52:	3303      	adds	r3, #3
 8002b54:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b6a:	f3ef 8305 	mrs	r3, IPSR
 8002b6e:	607b      	str	r3, [r7, #4]
  return(result);
 8002b70:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b8c:	f001 f910 	bl	8003db0 <vTaskStartScheduler>
  
  return osOK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b98:	b089      	sub	sp, #36	; 0x24
 8002b9a:	af04      	add	r7, sp, #16
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <osThreadCreate+0x54>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01c      	beq.n	8002bea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685c      	ldr	r4, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681d      	ldr	r5, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691e      	ldr	r6, [r3, #16]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ffb6 	bl	8002b34 <makeFreeRtosPriority>
 8002bc8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bd2:	9202      	str	r2, [sp, #8]
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	9100      	str	r1, [sp, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	4632      	mov	r2, r6
 8002bdc:	4629      	mov	r1, r5
 8002bde:	4620      	mov	r0, r4
 8002be0:	f000 ff1e 	bl	8003a20 <xTaskCreateStatic>
 8002be4:	4603      	mov	r3, r0
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e01c      	b.n	8002c24 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685c      	ldr	r4, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bf6:	b29e      	uxth	r6, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff98 	bl	8002b34 <makeFreeRtosPriority>
 8002c04:	4602      	mov	r2, r0
 8002c06:	f107 030c 	add.w	r3, r7, #12
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	9200      	str	r2, [sp, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	4632      	mov	r2, r6
 8002c12:	4629      	mov	r1, r5
 8002c14:	4620      	mov	r0, r4
 8002c16:	f000 ff60 	bl	8003ada <xTaskCreate>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d001      	beq.n	8002c24 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e000      	b.n	8002c26 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002c24:	68fb      	ldr	r3, [r7, #12]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c2e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <osDelay+0x16>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	e000      	b.n	8002c46 <osDelay+0x18>
 8002c44:	2301      	movs	r3, #1
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 f87e 	bl	8003d48 <vTaskDelay>
  
  return osOK;
 8002c4c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af02      	add	r7, sp, #8
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00f      	beq.n	8002c88 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d10a      	bne.n	8002c84 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2203      	movs	r2, #3
 8002c74:	9200      	str	r2, [sp, #0]
 8002c76:	2200      	movs	r2, #0
 8002c78:	2100      	movs	r1, #0
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f000 f9be 	bl	8002ffc <xQueueGenericCreateStatic>
 8002c80:	4603      	mov	r3, r0
 8002c82:	e016      	b.n	8002cb2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e014      	b.n	8002cb2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d110      	bne.n	8002cb0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002c8e:	2203      	movs	r2, #3
 8002c90:	2100      	movs	r1, #0
 8002c92:	2001      	movs	r0, #1
 8002c94:	f000 fa2a 	bl	80030ec <xQueueGenericCreate>
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <osSemaphoreCreate+0x56>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fa7a 	bl	80031a0 <xQueueGenericSend>
      return sema;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	e000      	b.n	8002cb2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002cb0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	e03a      	b.n	8002d4a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d103      	bne.n	8002ce8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	e009      	b.n	8002cfc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <osSemaphoreWait+0x40>
      ticks = 1;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002cfc:	f7ff ff32 	bl	8002b64 <inHandlerMode>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d017      	beq.n	8002d36 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002d06:	f107 0308 	add.w	r3, r7, #8
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fcde 	bl	80036d0 <xQueueReceiveFromISR>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d001      	beq.n	8002d1e <osSemaphoreWait+0x62>
      return osErrorOS;
 8002d1a:	23ff      	movs	r3, #255	; 0xff
 8002d1c:	e015      	b.n	8002d4a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d011      	beq.n	8002d48 <osSemaphoreWait+0x8c>
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <osSemaphoreWait+0x98>)
 8002d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	e008      	b.n	8002d48 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002d36:	68f9      	ldr	r1, [r7, #12]
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fbbd 	bl	80034b8 <xQueueSemaphoreTake>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d001      	beq.n	8002d48 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002d44:	23ff      	movs	r3, #255	; 0xff
 8002d46:	e000      	b.n	8002d4a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	e000ed04 	.word	0xe000ed04

08002d58 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002d68:	f7ff fefc 	bl	8002b64 <inHandlerMode>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d016      	beq.n	8002da0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002d72:	f107 0308 	add.w	r3, r7, #8
 8002d76:	4619      	mov	r1, r3
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fb0f 	bl	800339c <xQueueGiveFromISR>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d001      	beq.n	8002d88 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002d84:	23ff      	movs	r3, #255	; 0xff
 8002d86:	e017      	b.n	8002db8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d013      	beq.n	8002db6 <osSemaphoreRelease+0x5e>
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <osSemaphoreRelease+0x68>)
 8002d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	e00a      	b.n	8002db6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002da0:	2300      	movs	r3, #0
 8002da2:	2200      	movs	r2, #0
 8002da4:	2100      	movs	r1, #0
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f9fa 	bl	80031a0 <xQueueGenericSend>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d001      	beq.n	8002db6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002db2:	23ff      	movs	r3, #255	; 0xff
 8002db4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002db6:	68fb      	ldr	r3, [r7, #12]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	e000ed04 	.word	0xe000ed04

08002dc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f103 0208 	add.w	r2, r3, #8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ddc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f103 0208 	add.w	r2, r3, #8
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f103 0208 	add.w	r2, r3, #8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	601a      	str	r2, [r3, #0]
}
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e66:	b480      	push	{r7}
 8002e68:	b085      	sub	sp, #20
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d103      	bne.n	8002e86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	e00c      	b.n	8002ea0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3308      	adds	r3, #8
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e002      	b.n	8002e94 <vListInsert+0x2e>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d2f6      	bcs.n	8002e8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	601a      	str	r2, [r3, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6892      	ldr	r2, [r2, #8]
 8002eee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6852      	ldr	r2, [r2, #4]
 8002ef8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d103      	bne.n	8002f0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	1e5a      	subs	r2, r3, #1
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f52:	bf00      	nop
 8002f54:	e7fe      	b.n	8002f54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f56:	f001 fe75 	bl	8004c44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f62:	68f9      	ldr	r1, [r7, #12]
 8002f64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	441a      	add	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f86:	3b01      	subs	r3, #1
 8002f88:	68f9      	ldr	r1, [r7, #12]
 8002f8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	441a      	add	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	22ff      	movs	r2, #255	; 0xff
 8002f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	22ff      	movs	r2, #255	; 0xff
 8002fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d114      	bne.n	8002fd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01a      	beq.n	8002fea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3310      	adds	r3, #16
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f001 f93b 	bl	8004234 <xTaskRemoveFromEventList>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d012      	beq.n	8002fea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <xQueueGenericReset+0xcc>)
 8002fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	e009      	b.n	8002fea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3310      	adds	r3, #16
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fef2 	bl	8002dc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3324      	adds	r3, #36	; 0x24
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff feed 	bl	8002dc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002fea:	f001 fe5b 	bl	8004ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002fee:	2301      	movs	r3, #1
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	e000ed04 	.word	0xe000ed04

08002ffc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08e      	sub	sp, #56	; 0x38
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003022:	bf00      	nop
 8003024:	e7fe      	b.n	8003024 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10a      	bne.n	8003042 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800303e:	bf00      	nop
 8003040:	e7fe      	b.n	8003040 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <xQueueGenericCreateStatic+0x52>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <xQueueGenericCreateStatic+0x56>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <xQueueGenericCreateStatic+0x58>
 8003052:	2300      	movs	r3, #0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	623b      	str	r3, [r7, #32]
}
 800306a:	bf00      	nop
 800306c:	e7fe      	b.n	800306c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <xQueueGenericCreateStatic+0x7e>
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <xQueueGenericCreateStatic+0x82>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <xQueueGenericCreateStatic+0x84>
 800307e:	2300      	movs	r3, #0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	61fb      	str	r3, [r7, #28]
}
 8003096:	bf00      	nop
 8003098:	e7fe      	b.n	8003098 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800309a:	2348      	movs	r3, #72	; 0x48
 800309c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b48      	cmp	r3, #72	; 0x48
 80030a2:	d00a      	beq.n	80030ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80030a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	61bb      	str	r3, [r7, #24]
}
 80030b6:	bf00      	nop
 80030b8:	e7fe      	b.n	80030b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80030ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80030c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00d      	beq.n	80030e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	4613      	mov	r3, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f83f 	bl	8003160 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3730      	adds	r7, #48	; 0x30
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	4613      	mov	r3, r2
 80030f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	613b      	str	r3, [r7, #16]
}
 8003112:	bf00      	nop
 8003114:	e7fe      	b.n	8003114 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	3348      	adds	r3, #72	; 0x48
 8003124:	4618      	mov	r0, r3
 8003126:	f001 feaf 	bl	8004e88 <pvPortMalloc>
 800312a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d011      	beq.n	8003156 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	3348      	adds	r3, #72	; 0x48
 800313a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003144:	79fa      	ldrb	r2, [r7, #7]
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	4613      	mov	r3, r2
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f805 	bl	8003160 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003156:	69bb      	ldr	r3, [r7, #24]
	}
 8003158:	4618      	mov	r0, r3
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d103      	bne.n	800317c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e002      	b.n	8003182 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800318e:	2101      	movs	r1, #1
 8003190:	69b8      	ldr	r0, [r7, #24]
 8003192:	f7ff fecb 	bl	8002f2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08e      	sub	sp, #56	; 0x38
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031ae:	2300      	movs	r3, #0
 80031b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <xQueueGenericSend+0x32>
	__asm volatile
 80031bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031ce:	bf00      	nop
 80031d0:	e7fe      	b.n	80031d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d103      	bne.n	80031e0 <xQueueGenericSend+0x40>
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <xQueueGenericSend+0x44>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <xQueueGenericSend+0x46>
 80031e4:	2300      	movs	r3, #0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <xQueueGenericSend+0x60>
	__asm volatile
 80031ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031fc:	bf00      	nop
 80031fe:	e7fe      	b.n	80031fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d103      	bne.n	800320e <xQueueGenericSend+0x6e>
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <xQueueGenericSend+0x72>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <xQueueGenericSend+0x74>
 8003212:	2300      	movs	r3, #0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <xQueueGenericSend+0x8e>
	__asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	623b      	str	r3, [r7, #32]
}
 800322a:	bf00      	nop
 800322c:	e7fe      	b.n	800322c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800322e:	f001 f9bd 	bl	80045ac <xTaskGetSchedulerState>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d102      	bne.n	800323e <xQueueGenericSend+0x9e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <xQueueGenericSend+0xa2>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <xQueueGenericSend+0xa4>
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <xQueueGenericSend+0xbe>
	__asm volatile
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	61fb      	str	r3, [r7, #28]
}
 800325a:	bf00      	nop
 800325c:	e7fe      	b.n	800325c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800325e:	f001 fcf1 	bl	8004c44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	429a      	cmp	r2, r3
 800326c:	d302      	bcc.n	8003274 <xQueueGenericSend+0xd4>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d129      	bne.n	80032c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800327a:	f000 fac1 	bl	8003800 <prvCopyDataToQueue>
 800327e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	3324      	adds	r3, #36	; 0x24
 800328c:	4618      	mov	r0, r3
 800328e:	f000 ffd1 	bl	8004234 <xTaskRemoveFromEventList>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003298:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <xQueueGenericSend+0x1f8>)
 800329a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	e00a      	b.n	80032c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032b0:	4b39      	ldr	r3, [pc, #228]	; (8003398 <xQueueGenericSend+0x1f8>)
 80032b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032c0:	f001 fcf0 	bl	8004ca4 <vPortExitCritical>
				return pdPASS;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e063      	b.n	8003390 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d103      	bne.n	80032d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032ce:	f001 fce9 	bl	8004ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e05c      	b.n	8003390 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d106      	bne.n	80032ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	4618      	mov	r0, r3
 80032e2:	f001 f809 	bl	80042f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032e6:	2301      	movs	r3, #1
 80032e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032ea:	f001 fcdb 	bl	8004ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032ee:	f000 fdbf 	bl	8003e70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032f2:	f001 fca7 	bl	8004c44 <vPortEnterCritical>
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d103      	bne.n	800330c <xQueueGenericSend+0x16c>
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003312:	b25b      	sxtb	r3, r3
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d103      	bne.n	8003322 <xQueueGenericSend+0x182>
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003322:	f001 fcbf 	bl	8004ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003326:	1d3a      	adds	r2, r7, #4
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	4611      	mov	r1, r2
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fff8 	bl	8004324 <xTaskCheckForTimeOut>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d124      	bne.n	8003384 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800333a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800333c:	f000 fb58 	bl	80039f0 <prvIsQueueFull>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d018      	beq.n	8003378 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	3310      	adds	r3, #16
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4611      	mov	r1, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f000 ff4c 	bl	80041ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003356:	f000 fae3 	bl	8003920 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800335a:	f000 fd97 	bl	8003e8c <xTaskResumeAll>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	f47f af7c 	bne.w	800325e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003366:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <xQueueGenericSend+0x1f8>)
 8003368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	e772      	b.n	800325e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800337a:	f000 fad1 	bl	8003920 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800337e:	f000 fd85 	bl	8003e8c <xTaskResumeAll>
 8003382:	e76c      	b.n	800325e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003386:	f000 facb 	bl	8003920 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800338a:	f000 fd7f 	bl	8003e8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800338e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003390:	4618      	mov	r0, r3
 8003392:	3738      	adds	r7, #56	; 0x38
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	e000ed04 	.word	0xe000ed04

0800339c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08e      	sub	sp, #56	; 0x38
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	623b      	str	r3, [r7, #32]
}
 80033c2:	bf00      	nop
 80033c4:	e7fe      	b.n	80033c4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <xQueueGiveFromISR+0x48>
	__asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	61fb      	str	r3, [r7, #28]
}
 80033e0:	bf00      	nop
 80033e2:	e7fe      	b.n	80033e2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d103      	bne.n	80033f4 <xQueueGiveFromISR+0x58>
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <xQueueGiveFromISR+0x5c>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <xQueueGiveFromISR+0x5e>
 80033f8:	2300      	movs	r3, #0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <xQueueGiveFromISR+0x78>
	__asm volatile
 80033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	61bb      	str	r3, [r7, #24]
}
 8003410:	bf00      	nop
 8003412:	e7fe      	b.n	8003412 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003414:	f001 fcf8 	bl	8004e08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003418:	f3ef 8211 	mrs	r2, BASEPRI
 800341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	617a      	str	r2, [r7, #20]
 800342e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003430:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003440:	429a      	cmp	r2, r3
 8003442:	d22b      	bcs.n	800349c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800344a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003456:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d112      	bne.n	8003486 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	2b00      	cmp	r3, #0
 8003466:	d016      	beq.n	8003496 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	3324      	adds	r3, #36	; 0x24
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fee1 	bl	8004234 <xTaskRemoveFromEventList>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00e      	beq.n	8003496 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e007      	b.n	8003496 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800348a:	3301      	adds	r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	b25a      	sxtb	r2, r3
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003496:	2301      	movs	r3, #1
 8003498:	637b      	str	r3, [r7, #52]	; 0x34
 800349a:	e001      	b.n	80034a0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800349c:	2300      	movs	r3, #0
 800349e:	637b      	str	r3, [r7, #52]	; 0x34
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3738      	adds	r7, #56	; 0x38
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08e      	sub	sp, #56	; 0x38
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <xQueueSemaphoreTake+0x32>
	__asm volatile
 80034d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	623b      	str	r3, [r7, #32]
}
 80034e6:	bf00      	nop
 80034e8:	e7fe      	b.n	80034e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	61fb      	str	r3, [r7, #28]
}
 8003504:	bf00      	nop
 8003506:	e7fe      	b.n	8003506 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003508:	f001 f850 	bl	80045ac <xTaskGetSchedulerState>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d102      	bne.n	8003518 <xQueueSemaphoreTake+0x60>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <xQueueSemaphoreTake+0x64>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <xQueueSemaphoreTake+0x66>
 800351c:	2300      	movs	r3, #0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10a      	bne.n	8003538 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	61bb      	str	r3, [r7, #24]
}
 8003534:	bf00      	nop
 8003536:	e7fe      	b.n	8003536 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003538:	f001 fb84 	bl	8004c44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	d024      	beq.n	8003592 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	1e5a      	subs	r2, r3, #1
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d104      	bne.n	8003562 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003558:	f001 f9d0 	bl	80048fc <pvTaskIncrementMutexHeldCount>
 800355c:	4602      	mov	r2, r0
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00f      	beq.n	800358a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	3310      	adds	r3, #16
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fe60 	bl	8004234 <xTaskRemoveFromEventList>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d007      	beq.n	800358a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800357a:	4b54      	ldr	r3, [pc, #336]	; (80036cc <xQueueSemaphoreTake+0x214>)
 800357c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800358a:	f001 fb8b 	bl	8004ca4 <vPortExitCritical>
				return pdPASS;
 800358e:	2301      	movs	r3, #1
 8003590:	e097      	b.n	80036c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d111      	bne.n	80035bc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	617b      	str	r3, [r7, #20]
}
 80035b0:	bf00      	nop
 80035b2:	e7fe      	b.n	80035b2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80035b4:	f001 fb76 	bl	8004ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e082      	b.n	80036c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035c2:	f107 030c 	add.w	r3, r7, #12
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fe96 	bl	80042f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035cc:	2301      	movs	r3, #1
 80035ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035d0:	f001 fb68 	bl	8004ca4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035d4:	f000 fc4c 	bl	8003e70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035d8:	f001 fb34 	bl	8004c44 <vPortEnterCritical>
 80035dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035e2:	b25b      	sxtb	r3, r3
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d103      	bne.n	80035f2 <xQueueSemaphoreTake+0x13a>
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035f8:	b25b      	sxtb	r3, r3
 80035fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fe:	d103      	bne.n	8003608 <xQueueSemaphoreTake+0x150>
 8003600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003608:	f001 fb4c 	bl	8004ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800360c:	463a      	mov	r2, r7
 800360e:	f107 030c 	add.w	r3, r7, #12
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fe85 	bl	8004324 <xTaskCheckForTimeOut>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d132      	bne.n	8003686 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003622:	f000 f9cf 	bl	80039c4 <prvIsQueueEmpty>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d026      	beq.n	800367a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d109      	bne.n	8003648 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003634:	f001 fb06 	bl	8004c44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 ffd3 	bl	80045e8 <xTaskPriorityInherit>
 8003642:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003644:	f001 fb2e 	bl	8004ca4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	3324      	adds	r3, #36	; 0x24
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	4611      	mov	r1, r2
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fdcb 	bl	80041ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003656:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003658:	f000 f962 	bl	8003920 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800365c:	f000 fc16 	bl	8003e8c <xTaskResumeAll>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	f47f af68 	bne.w	8003538 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003668:	4b18      	ldr	r3, [pc, #96]	; (80036cc <xQueueSemaphoreTake+0x214>)
 800366a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	e75e      	b.n	8003538 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800367a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800367c:	f000 f950 	bl	8003920 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003680:	f000 fc04 	bl	8003e8c <xTaskResumeAll>
 8003684:	e758      	b.n	8003538 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003686:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003688:	f000 f94a 	bl	8003920 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800368c:	f000 fbfe 	bl	8003e8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003690:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003692:	f000 f997 	bl	80039c4 <prvIsQueueEmpty>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	f43f af4d 	beq.w	8003538 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00d      	beq.n	80036c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80036a4:	f001 face 	bl	8004c44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80036a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036aa:	f000 f891 	bl	80037d0 <prvGetDisinheritPriorityAfterTimeout>
 80036ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80036b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 f892 	bl	80047e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80036bc:	f001 faf2 	bl	8004ca4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3738      	adds	r7, #56	; 0x38
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	e000ed04 	.word	0xe000ed04

080036d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	; 0x38
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10a      	bne.n	80036fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	623b      	str	r3, [r7, #32]
}
 80036f8:	bf00      	nop
 80036fa:	e7fe      	b.n	80036fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d103      	bne.n	800370a <xQueueReceiveFromISR+0x3a>
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <xQueueReceiveFromISR+0x3e>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <xQueueReceiveFromISR+0x40>
 800370e:	2300      	movs	r3, #0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	61fb      	str	r3, [r7, #28]
}
 8003726:	bf00      	nop
 8003728:	e7fe      	b.n	8003728 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800372a:	f001 fb6d 	bl	8004e08 <vPortValidateInterruptPriority>
	__asm volatile
 800372e:	f3ef 8211 	mrs	r2, BASEPRI
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	61ba      	str	r2, [r7, #24]
 8003744:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003746:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	2b00      	cmp	r3, #0
 8003754:	d02f      	beq.n	80037b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800375c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003764:	f000 f8b6 	bl	80038d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	1e5a      	subs	r2, r3, #1
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003770:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d112      	bne.n	80037a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d016      	beq.n	80037b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	3310      	adds	r3, #16
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fd54 	bl	8004234 <xTaskRemoveFromEventList>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00e      	beq.n	80037b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e007      	b.n	80037b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80037a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037a4:	3301      	adds	r3, #1
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	b25a      	sxtb	r2, r3
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80037b0:	2301      	movs	r3, #1
 80037b2:	637b      	str	r3, [r7, #52]	; 0x34
 80037b4:	e001      	b.n	80037ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f383 8811 	msr	BASEPRI, r3
}
 80037c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3738      	adds	r7, #56	; 0x38
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d006      	beq.n	80037ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f1c3 0307 	rsb	r3, r3, #7
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	e001      	b.n	80037f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80037f2:	68fb      	ldr	r3, [r7, #12]
	}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10d      	bne.n	800383a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d14d      	bne.n	80038c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 ff52 	bl	80046d4 <xTaskPriorityDisinherit>
 8003830:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	e043      	b.n	80038c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d119      	bne.n	8003874 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6858      	ldr	r0, [r3, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	461a      	mov	r2, r3
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	f001 fd2a 	bl	80052a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	441a      	add	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	429a      	cmp	r2, r3
 8003868:	d32b      	bcc.n	80038c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	e026      	b.n	80038c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	68d8      	ldr	r0, [r3, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	461a      	mov	r2, r3
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	f001 fd10 	bl	80052a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	425b      	negs	r3, r3
 800388e:	441a      	add	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d207      	bcs.n	80038b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	425b      	negs	r3, r3
 80038aa:	441a      	add	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d105      	bne.n	80038c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	3b01      	subs	r3, #1
 80038c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80038ca:	697b      	ldr	r3, [r7, #20]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	441a      	add	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d303      	bcc.n	8003908 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68d9      	ldr	r1, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	461a      	mov	r2, r3
 8003912:	6838      	ldr	r0, [r7, #0]
 8003914:	f001 fcc6 	bl	80052a4 <memcpy>
	}
}
 8003918:	bf00      	nop
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003928:	f001 f98c 	bl	8004c44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003932:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003934:	e011      	b.n	800395a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	2b00      	cmp	r3, #0
 800393c:	d012      	beq.n	8003964 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3324      	adds	r3, #36	; 0x24
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fc76 	bl	8004234 <xTaskRemoveFromEventList>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800394e:	f000 fd4b 	bl	80043e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	3b01      	subs	r3, #1
 8003956:	b2db      	uxtb	r3, r3
 8003958:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800395a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395e:	2b00      	cmp	r3, #0
 8003960:	dce9      	bgt.n	8003936 <prvUnlockQueue+0x16>
 8003962:	e000      	b.n	8003966 <prvUnlockQueue+0x46>
					break;
 8003964:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	22ff      	movs	r2, #255	; 0xff
 800396a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800396e:	f001 f999 	bl	8004ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003972:	f001 f967 	bl	8004c44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800397c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800397e:	e011      	b.n	80039a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d012      	beq.n	80039ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3310      	adds	r3, #16
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fc51 	bl	8004234 <xTaskRemoveFromEventList>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003998:	f000 fd26 	bl	80043e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800399c:	7bbb      	ldrb	r3, [r7, #14]
 800399e:	3b01      	subs	r3, #1
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	dce9      	bgt.n	8003980 <prvUnlockQueue+0x60>
 80039ac:	e000      	b.n	80039b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	22ff      	movs	r2, #255	; 0xff
 80039b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80039b8:	f001 f974 	bl	8004ca4 <vPortExitCritical>
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039cc:	f001 f93a 	bl	8004c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039d8:	2301      	movs	r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e001      	b.n	80039e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039e2:	f001 f95f 	bl	8004ca4 <vPortExitCritical>

	return xReturn;
 80039e6:	68fb      	ldr	r3, [r7, #12]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039f8:	f001 f924 	bl	8004c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d102      	bne.n	8003a0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	e001      	b.n	8003a12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a12:	f001 f947 	bl	8004ca4 <vPortExitCritical>

	return xReturn;
 8003a16:	68fb      	ldr	r3, [r7, #12]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08e      	sub	sp, #56	; 0x38
 8003a24:	af04      	add	r7, sp, #16
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	623b      	str	r3, [r7, #32]
}
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <xTaskCreateStatic+0x46>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	61fb      	str	r3, [r7, #28]
}
 8003a62:	bf00      	nop
 8003a64:	e7fe      	b.n	8003a64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a66:	2354      	movs	r3, #84	; 0x54
 8003a68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b54      	cmp	r3, #84	; 0x54
 8003a6e:	d00a      	beq.n	8003a86 <xTaskCreateStatic+0x66>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	61bb      	str	r3, [r7, #24]
}
 8003a82:	bf00      	nop
 8003a84:	e7fe      	b.n	8003a84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01e      	beq.n	8003acc <xTaskCreateStatic+0xac>
 8003a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01b      	beq.n	8003acc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	9303      	str	r3, [sp, #12]
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	9302      	str	r3, [sp, #8]
 8003aae:	f107 0314 	add.w	r3, r7, #20
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f850 	bl	8003b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ac6:	f000 f8d5 	bl	8003c74 <prvAddNewTaskToReadyList>
 8003aca:	e001      	b.n	8003ad0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ad0:	697b      	ldr	r3, [r7, #20]
	}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3728      	adds	r7, #40	; 0x28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b08c      	sub	sp, #48	; 0x30
 8003ade:	af04      	add	r7, sp, #16
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 f9ca 	bl	8004e88 <pvPortMalloc>
 8003af4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00e      	beq.n	8003b1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003afc:	2054      	movs	r0, #84	; 0x54
 8003afe:	f001 f9c3 	bl	8004e88 <pvPortMalloc>
 8003b02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b10:	e005      	b.n	8003b1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b12:	6978      	ldr	r0, [r7, #20]
 8003b14:	f001 fa84 	bl	8005020 <vPortFree>
 8003b18:	e001      	b.n	8003b1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d017      	beq.n	8003b54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b2c:	88fa      	ldrh	r2, [r7, #6]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9303      	str	r3, [sp, #12]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	9302      	str	r3, [sp, #8]
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f80e 	bl	8003b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b48:	69f8      	ldr	r0, [r7, #28]
 8003b4a:	f000 f893 	bl	8003c74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	e002      	b.n	8003b5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b54:	f04f 33ff 	mov.w	r3, #4294967295
 8003b58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f023 0307 	bic.w	r3, r3, #7
 8003b8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <prvInitialiseNewTask+0x48>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	617b      	str	r3, [r7, #20]
}
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d01f      	beq.n	8003bf2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	e012      	b.n	8003bde <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	7819      	ldrb	r1, [r3, #0]
 8003bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3334      	adds	r3, #52	; 0x34
 8003bc8:	460a      	mov	r2, r1
 8003bca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d006      	beq.n	8003be6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	2b0f      	cmp	r3, #15
 8003be2:	d9e9      	bls.n	8003bb8 <prvInitialiseNewTask+0x54>
 8003be4:	e000      	b.n	8003be8 <prvInitialiseNewTask+0x84>
			{
				break;
 8003be6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bf0:	e003      	b.n	8003bfa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfc:	2b06      	cmp	r3, #6
 8003bfe:	d901      	bls.n	8003c04 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c00:	2306      	movs	r3, #6
 8003c02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	2200      	movs	r2, #0
 8003c14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	3304      	adds	r3, #4
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff f8f2 	bl	8002e04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	3318      	adds	r3, #24
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff f8ed 	bl	8002e04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	f1c3 0207 	rsb	r2, r3, #7
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	2200      	movs	r2, #0
 8003c44:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	68f9      	ldr	r1, [r7, #12]
 8003c52:	69b8      	ldr	r0, [r7, #24]
 8003c54:	f000 fecc 	bl	80049f0 <pxPortInitialiseStack>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c6a:	bf00      	nop
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c7c:	f000 ffe2 	bl	8004c44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c80:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <prvAddNewTaskToReadyList+0xb8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3301      	adds	r3, #1
 8003c86:	4a29      	ldr	r2, [pc, #164]	; (8003d2c <prvAddNewTaskToReadyList+0xb8>)
 8003c88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c8a:	4b29      	ldr	r3, [pc, #164]	; (8003d30 <prvAddNewTaskToReadyList+0xbc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c92:	4a27      	ldr	r2, [pc, #156]	; (8003d30 <prvAddNewTaskToReadyList+0xbc>)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c98:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <prvAddNewTaskToReadyList+0xb8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d110      	bne.n	8003cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ca0:	f000 fbc6 	bl	8004430 <prvInitialiseTaskLists>
 8003ca4:	e00d      	b.n	8003cc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ca6:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <prvAddNewTaskToReadyList+0xc0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cae:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <prvAddNewTaskToReadyList+0xbc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d802      	bhi.n	8003cc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <prvAddNewTaskToReadyList+0xbc>)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cc2:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <prvAddNewTaskToReadyList+0xc4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <prvAddNewTaskToReadyList+0xc4>)
 8003cca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <prvAddNewTaskToReadyList+0xc8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <prvAddNewTaskToReadyList+0xc8>)
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4a15      	ldr	r2, [pc, #84]	; (8003d40 <prvAddNewTaskToReadyList+0xcc>)
 8003cec:	441a      	add	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	f7ff f892 	bl	8002e1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003cfa:	f000 ffd3 	bl	8004ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <prvAddNewTaskToReadyList+0xc0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00e      	beq.n	8003d24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d06:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <prvAddNewTaskToReadyList+0xbc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d207      	bcs.n	8003d24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <prvAddNewTaskToReadyList+0xd0>)
 8003d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000420 	.word	0x20000420
 8003d30:	20000320 	.word	0x20000320
 8003d34:	2000042c 	.word	0x2000042c
 8003d38:	2000043c 	.word	0x2000043c
 8003d3c:	20000428 	.word	0x20000428
 8003d40:	20000324 	.word	0x20000324
 8003d44:	e000ed04 	.word	0xe000ed04

08003d48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d017      	beq.n	8003d8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d5a:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <vTaskDelay+0x60>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <vTaskDelay+0x30>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	60bb      	str	r3, [r7, #8]
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d78:	f000 f87a 	bl	8003e70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fdd0 	bl	8004924 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d84:	f000 f882 	bl	8003e8c <xTaskResumeAll>
 8003d88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d107      	bne.n	8003da0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d90:	4b06      	ldr	r3, [pc, #24]	; (8003dac <vTaskDelay+0x64>)
 8003d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000448 	.word	0x20000448
 8003dac:	e000ed04 	.word	0xe000ed04

08003db0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dbe:	463a      	mov	r2, r7
 8003dc0:	1d39      	adds	r1, r7, #4
 8003dc2:	f107 0308 	add.w	r3, r7, #8
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fc fbac 	bl	8000524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003dcc:	6839      	ldr	r1, [r7, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	9202      	str	r2, [sp, #8]
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	460a      	mov	r2, r1
 8003dde:	491e      	ldr	r1, [pc, #120]	; (8003e58 <vTaskStartScheduler+0xa8>)
 8003de0:	481e      	ldr	r0, [pc, #120]	; (8003e5c <vTaskStartScheduler+0xac>)
 8003de2:	f7ff fe1d 	bl	8003a20 <xTaskCreateStatic>
 8003de6:	4603      	mov	r3, r0
 8003de8:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <vTaskStartScheduler+0xb0>)
 8003dea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003dec:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <vTaskStartScheduler+0xb0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003df4:	2301      	movs	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	e001      	b.n	8003dfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d116      	bne.n	8003e32 <vTaskStartScheduler+0x82>
	__asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	613b      	str	r3, [r7, #16]
}
 8003e16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <vTaskStartScheduler+0xb4>)
 8003e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <vTaskStartScheduler+0xb8>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e26:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <vTaskStartScheduler+0xbc>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e2c:	f000 fe68 	bl	8004b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e30:	e00e      	b.n	8003e50 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d10a      	bne.n	8003e50 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	60fb      	str	r3, [r7, #12]
}
 8003e4c:	bf00      	nop
 8003e4e:	e7fe      	b.n	8003e4e <vTaskStartScheduler+0x9e>
}
 8003e50:	bf00      	nop
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	0800546c 	.word	0x0800546c
 8003e5c:	08004401 	.word	0x08004401
 8003e60:	20000444 	.word	0x20000444
 8003e64:	20000440 	.word	0x20000440
 8003e68:	2000042c 	.word	0x2000042c
 8003e6c:	20000424 	.word	0x20000424

08003e70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e74:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <vTaskSuspendAll+0x18>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	4a03      	ldr	r2, [pc, #12]	; (8003e88 <vTaskSuspendAll+0x18>)
 8003e7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e7e:	bf00      	nop
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	20000448 	.word	0x20000448

08003e8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e9a:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <xTaskResumeAll+0x114>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	603b      	str	r3, [r7, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	e7fe      	b.n	8003eb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003eb8:	f000 fec4 	bl	8004c44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ebc:	4b38      	ldr	r3, [pc, #224]	; (8003fa0 <xTaskResumeAll+0x114>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	4a37      	ldr	r2, [pc, #220]	; (8003fa0 <xTaskResumeAll+0x114>)
 8003ec4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ec6:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <xTaskResumeAll+0x114>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d161      	bne.n	8003f92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ece:	4b35      	ldr	r3, [pc, #212]	; (8003fa4 <xTaskResumeAll+0x118>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d05d      	beq.n	8003f92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ed6:	e02e      	b.n	8003f36 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed8:	4b33      	ldr	r3, [pc, #204]	; (8003fa8 <xTaskResumeAll+0x11c>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3318      	adds	r3, #24
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe fff7 	bl	8002ed8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3304      	adds	r3, #4
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fff2 	bl	8002ed8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	2201      	movs	r2, #1
 8003efa:	409a      	lsls	r2, r3
 8003efc:	4b2b      	ldr	r3, [pc, #172]	; (8003fac <xTaskResumeAll+0x120>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	4a2a      	ldr	r2, [pc, #168]	; (8003fac <xTaskResumeAll+0x120>)
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4a27      	ldr	r2, [pc, #156]	; (8003fb0 <xTaskResumeAll+0x124>)
 8003f14:	441a      	add	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	f7fe ff7e 	bl	8002e1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f26:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <xTaskResumeAll+0x128>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d302      	bcc.n	8003f36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003f30:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <xTaskResumeAll+0x12c>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f36:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <xTaskResumeAll+0x11c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1cc      	bne.n	8003ed8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f44:	f000 fb12 	bl	800456c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f48:	4b1c      	ldr	r3, [pc, #112]	; (8003fbc <xTaskResumeAll+0x130>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d010      	beq.n	8003f76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f54:	f000 f836 	bl	8003fc4 <xTaskIncrementTick>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003f5e:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <xTaskResumeAll+0x12c>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f1      	bne.n	8003f54 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003f70:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <xTaskResumeAll+0x130>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <xTaskResumeAll+0x12c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f82:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <xTaskResumeAll+0x134>)
 8003f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f92:	f000 fe87 	bl	8004ca4 <vPortExitCritical>

	return xAlreadyYielded;
 8003f96:	68bb      	ldr	r3, [r7, #8]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000448 	.word	0x20000448
 8003fa4:	20000420 	.word	0x20000420
 8003fa8:	200003e0 	.word	0x200003e0
 8003fac:	20000428 	.word	0x20000428
 8003fb0:	20000324 	.word	0x20000324
 8003fb4:	20000320 	.word	0x20000320
 8003fb8:	20000434 	.word	0x20000434
 8003fbc:	20000430 	.word	0x20000430
 8003fc0:	e000ed04 	.word	0xe000ed04

08003fc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fce:	4b4e      	ldr	r3, [pc, #312]	; (8004108 <xTaskIncrementTick+0x144>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 808e 	bne.w	80040f4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fd8:	4b4c      	ldr	r3, [pc, #304]	; (800410c <xTaskIncrementTick+0x148>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fe0:	4a4a      	ldr	r2, [pc, #296]	; (800410c <xTaskIncrementTick+0x148>)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d120      	bne.n	800402e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fec:	4b48      	ldr	r3, [pc, #288]	; (8004110 <xTaskIncrementTick+0x14c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <xTaskIncrementTick+0x48>
	__asm volatile
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	603b      	str	r3, [r7, #0]
}
 8004008:	bf00      	nop
 800400a:	e7fe      	b.n	800400a <xTaskIncrementTick+0x46>
 800400c:	4b40      	ldr	r3, [pc, #256]	; (8004110 <xTaskIncrementTick+0x14c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	4b40      	ldr	r3, [pc, #256]	; (8004114 <xTaskIncrementTick+0x150>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a3e      	ldr	r2, [pc, #248]	; (8004110 <xTaskIncrementTick+0x14c>)
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	4a3e      	ldr	r2, [pc, #248]	; (8004114 <xTaskIncrementTick+0x150>)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	4b3d      	ldr	r3, [pc, #244]	; (8004118 <xTaskIncrementTick+0x154>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3301      	adds	r3, #1
 8004026:	4a3c      	ldr	r2, [pc, #240]	; (8004118 <xTaskIncrementTick+0x154>)
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	f000 fa9f 	bl	800456c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800402e:	4b3b      	ldr	r3, [pc, #236]	; (800411c <xTaskIncrementTick+0x158>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	429a      	cmp	r2, r3
 8004036:	d348      	bcc.n	80040ca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004038:	4b35      	ldr	r3, [pc, #212]	; (8004110 <xTaskIncrementTick+0x14c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d104      	bne.n	800404c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004042:	4b36      	ldr	r3, [pc, #216]	; (800411c <xTaskIncrementTick+0x158>)
 8004044:	f04f 32ff 	mov.w	r2, #4294967295
 8004048:	601a      	str	r2, [r3, #0]
					break;
 800404a:	e03e      	b.n	80040ca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800404c:	4b30      	ldr	r3, [pc, #192]	; (8004110 <xTaskIncrementTick+0x14c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d203      	bcs.n	800406c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004064:	4a2d      	ldr	r2, [pc, #180]	; (800411c <xTaskIncrementTick+0x158>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800406a:	e02e      	b.n	80040ca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	3304      	adds	r3, #4
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe ff31 	bl	8002ed8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d004      	beq.n	8004088 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	3318      	adds	r3, #24
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe ff28 	bl	8002ed8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	2201      	movs	r2, #1
 800408e:	409a      	lsls	r2, r3
 8004090:	4b23      	ldr	r3, [pc, #140]	; (8004120 <xTaskIncrementTick+0x15c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4313      	orrs	r3, r2
 8004096:	4a22      	ldr	r2, [pc, #136]	; (8004120 <xTaskIncrementTick+0x15c>)
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4a1f      	ldr	r2, [pc, #124]	; (8004124 <xTaskIncrementTick+0x160>)
 80040a8:	441a      	add	r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f7fe feb4 	bl	8002e1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ba:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <xTaskIncrementTick+0x164>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d3b9      	bcc.n	8004038 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80040c4:	2301      	movs	r3, #1
 80040c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040c8:	e7b6      	b.n	8004038 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040ca:	4b17      	ldr	r3, [pc, #92]	; (8004128 <xTaskIncrementTick+0x164>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d0:	4914      	ldr	r1, [pc, #80]	; (8004124 <xTaskIncrementTick+0x160>)
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d901      	bls.n	80040e6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80040e2:	2301      	movs	r3, #1
 80040e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <xTaskIncrementTick+0x168>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80040ee:	2301      	movs	r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e004      	b.n	80040fe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <xTaskIncrementTick+0x16c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	4a0d      	ldr	r2, [pc, #52]	; (8004130 <xTaskIncrementTick+0x16c>)
 80040fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80040fe:	697b      	ldr	r3, [r7, #20]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20000448 	.word	0x20000448
 800410c:	20000424 	.word	0x20000424
 8004110:	200003d8 	.word	0x200003d8
 8004114:	200003dc 	.word	0x200003dc
 8004118:	20000438 	.word	0x20000438
 800411c:	20000440 	.word	0x20000440
 8004120:	20000428 	.word	0x20000428
 8004124:	20000324 	.word	0x20000324
 8004128:	20000320 	.word	0x20000320
 800412c:	20000434 	.word	0x20000434
 8004130:	20000430 	.word	0x20000430

08004134 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800413a:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <vTaskSwitchContext+0xa4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004142:	4b26      	ldr	r3, [pc, #152]	; (80041dc <vTaskSwitchContext+0xa8>)
 8004144:	2201      	movs	r2, #1
 8004146:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004148:	e03f      	b.n	80041ca <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800414a:	4b24      	ldr	r3, [pc, #144]	; (80041dc <vTaskSwitchContext+0xa8>)
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004150:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <vTaskSwitchContext+0xac>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	fab3 f383 	clz	r3, r3
 800415c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800415e:	7afb      	ldrb	r3, [r7, #11]
 8004160:	f1c3 031f 	rsb	r3, r3, #31
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	491f      	ldr	r1, [pc, #124]	; (80041e4 <vTaskSwitchContext+0xb0>)
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <vTaskSwitchContext+0x5c>
	__asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	607b      	str	r3, [r7, #4]
}
 800418c:	bf00      	nop
 800418e:	e7fe      	b.n	800418e <vTaskSwitchContext+0x5a>
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <vTaskSwitchContext+0xb0>)
 800419c:	4413      	add	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	3308      	adds	r3, #8
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d104      	bne.n	80041c0 <vTaskSwitchContext+0x8c>
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	605a      	str	r2, [r3, #4]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	4a08      	ldr	r2, [pc, #32]	; (80041e8 <vTaskSwitchContext+0xb4>)
 80041c8:	6013      	str	r3, [r2, #0]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000448 	.word	0x20000448
 80041dc:	20000434 	.word	0x20000434
 80041e0:	20000428 	.word	0x20000428
 80041e4:	20000324 	.word	0x20000324
 80041e8:	20000320 	.word	0x20000320

080041ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	60fb      	str	r3, [r7, #12]
}
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004212:	4b07      	ldr	r3, [pc, #28]	; (8004230 <vTaskPlaceOnEventList+0x44>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3318      	adds	r3, #24
 8004218:	4619      	mov	r1, r3
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fe fe23 	bl	8002e66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004220:	2101      	movs	r1, #1
 8004222:	6838      	ldr	r0, [r7, #0]
 8004224:	f000 fb7e 	bl	8004924 <prvAddCurrentTaskToDelayedList>
}
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000320 	.word	0x20000320

08004234 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10a      	bne.n	8004260 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	60fb      	str	r3, [r7, #12]
}
 800425c:	bf00      	nop
 800425e:	e7fe      	b.n	800425e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	3318      	adds	r3, #24
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe fe37 	bl	8002ed8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800426a:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <xTaskRemoveFromEventList+0xac>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d11c      	bne.n	80042ac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	3304      	adds	r3, #4
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe fe2e 	bl	8002ed8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	2201      	movs	r2, #1
 8004282:	409a      	lsls	r2, r3
 8004284:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <xTaskRemoveFromEventList+0xb0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4313      	orrs	r3, r2
 800428a:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <xTaskRemoveFromEventList+0xb0>)
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4a13      	ldr	r2, [pc, #76]	; (80042e8 <xTaskRemoveFromEventList+0xb4>)
 800429c:	441a      	add	r2, r3
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f7fe fdba 	bl	8002e1e <vListInsertEnd>
 80042aa:	e005      	b.n	80042b8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	3318      	adds	r3, #24
 80042b0:	4619      	mov	r1, r3
 80042b2:	480e      	ldr	r0, [pc, #56]	; (80042ec <xTaskRemoveFromEventList+0xb8>)
 80042b4:	f7fe fdb3 	bl	8002e1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <xTaskRemoveFromEventList+0xbc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d905      	bls.n	80042d2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042c6:	2301      	movs	r3, #1
 80042c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <xTaskRemoveFromEventList+0xc0>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	e001      	b.n	80042d6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042d6:	697b      	ldr	r3, [r7, #20]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000448 	.word	0x20000448
 80042e4:	20000428 	.word	0x20000428
 80042e8:	20000324 	.word	0x20000324
 80042ec:	200003e0 	.word	0x200003e0
 80042f0:	20000320 	.word	0x20000320
 80042f4:	20000434 	.word	0x20000434

080042f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <vTaskInternalSetTimeOutState+0x24>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <vTaskInternalSetTimeOutState+0x28>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	605a      	str	r2, [r3, #4]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	20000438 	.word	0x20000438
 8004320:	20000424 	.word	0x20000424

08004324 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10a      	bne.n	800434a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	613b      	str	r3, [r7, #16]
}
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	60fb      	str	r3, [r7, #12]
}
 8004362:	bf00      	nop
 8004364:	e7fe      	b.n	8004364 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004366:	f000 fc6d 	bl	8004c44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800436a:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <xTaskCheckForTimeOut+0xbc>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d102      	bne.n	800438a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004384:	2300      	movs	r3, #0
 8004386:	61fb      	str	r3, [r7, #28]
 8004388:	e023      	b.n	80043d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <xTaskCheckForTimeOut+0xc0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d007      	beq.n	80043a6 <xTaskCheckForTimeOut+0x82>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	429a      	cmp	r2, r3
 800439e:	d302      	bcc.n	80043a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043a0:	2301      	movs	r3, #1
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	e015      	b.n	80043d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d20b      	bcs.n	80043c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1ad2      	subs	r2, r2, r3
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ff9b 	bl	80042f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	e004      	b.n	80043d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043ce:	2301      	movs	r3, #1
 80043d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043d2:	f000 fc67 	bl	8004ca4 <vPortExitCritical>

	return xReturn;
 80043d6:	69fb      	ldr	r3, [r7, #28]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3720      	adds	r7, #32
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20000424 	.word	0x20000424
 80043e4:	20000438 	.word	0x20000438

080043e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <vTaskMissedYield+0x14>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
}
 80043f2:	bf00      	nop
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	20000434 	.word	0x20000434

08004400 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004408:	f000 f852 	bl	80044b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <prvIdleTask+0x28>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d9f9      	bls.n	8004408 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <prvIdleTask+0x2c>)
 8004416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004424:	e7f0      	b.n	8004408 <prvIdleTask+0x8>
 8004426:	bf00      	nop
 8004428:	20000324 	.word	0x20000324
 800442c:	e000ed04 	.word	0xe000ed04

08004430 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004436:	2300      	movs	r3, #0
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	e00c      	b.n	8004456 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4a12      	ldr	r2, [pc, #72]	; (8004490 <prvInitialiseTaskLists+0x60>)
 8004448:	4413      	add	r3, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe fcba 	bl	8002dc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3301      	adds	r3, #1
 8004454:	607b      	str	r3, [r7, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b06      	cmp	r3, #6
 800445a:	d9ef      	bls.n	800443c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800445c:	480d      	ldr	r0, [pc, #52]	; (8004494 <prvInitialiseTaskLists+0x64>)
 800445e:	f7fe fcb1 	bl	8002dc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004462:	480d      	ldr	r0, [pc, #52]	; (8004498 <prvInitialiseTaskLists+0x68>)
 8004464:	f7fe fcae 	bl	8002dc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004468:	480c      	ldr	r0, [pc, #48]	; (800449c <prvInitialiseTaskLists+0x6c>)
 800446a:	f7fe fcab 	bl	8002dc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800446e:	480c      	ldr	r0, [pc, #48]	; (80044a0 <prvInitialiseTaskLists+0x70>)
 8004470:	f7fe fca8 	bl	8002dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004474:	480b      	ldr	r0, [pc, #44]	; (80044a4 <prvInitialiseTaskLists+0x74>)
 8004476:	f7fe fca5 	bl	8002dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <prvInitialiseTaskLists+0x78>)
 800447c:	4a05      	ldr	r2, [pc, #20]	; (8004494 <prvInitialiseTaskLists+0x64>)
 800447e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004480:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <prvInitialiseTaskLists+0x7c>)
 8004482:	4a05      	ldr	r2, [pc, #20]	; (8004498 <prvInitialiseTaskLists+0x68>)
 8004484:	601a      	str	r2, [r3, #0]
}
 8004486:	bf00      	nop
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000324 	.word	0x20000324
 8004494:	200003b0 	.word	0x200003b0
 8004498:	200003c4 	.word	0x200003c4
 800449c:	200003e0 	.word	0x200003e0
 80044a0:	200003f4 	.word	0x200003f4
 80044a4:	2000040c 	.word	0x2000040c
 80044a8:	200003d8 	.word	0x200003d8
 80044ac:	200003dc 	.word	0x200003dc

080044b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044b6:	e019      	b.n	80044ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044b8:	f000 fbc4 	bl	8004c44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044bc:	4b10      	ldr	r3, [pc, #64]	; (8004500 <prvCheckTasksWaitingTermination+0x50>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fe fd05 	bl	8002ed8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044ce:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <prvCheckTasksWaitingTermination+0x54>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	4a0b      	ldr	r2, [pc, #44]	; (8004504 <prvCheckTasksWaitingTermination+0x54>)
 80044d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <prvCheckTasksWaitingTermination+0x58>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3b01      	subs	r3, #1
 80044de:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <prvCheckTasksWaitingTermination+0x58>)
 80044e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044e2:	f000 fbdf 	bl	8004ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f810 	bl	800450c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <prvCheckTasksWaitingTermination+0x58>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e1      	bne.n	80044b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	200003f4 	.word	0x200003f4
 8004504:	20000420 	.word	0x20000420
 8004508:	20000408 	.word	0x20000408

0800450c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800451a:	2b00      	cmp	r3, #0
 800451c:	d108      	bne.n	8004530 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fd7c 	bl	8005020 <vPortFree>
				vPortFree( pxTCB );
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fd79 	bl	8005020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800452e:	e018      	b.n	8004562 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004536:	2b01      	cmp	r3, #1
 8004538:	d103      	bne.n	8004542 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fd70 	bl	8005020 <vPortFree>
	}
 8004540:	e00f      	b.n	8004562 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004548:	2b02      	cmp	r3, #2
 800454a:	d00a      	beq.n	8004562 <prvDeleteTCB+0x56>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	60fb      	str	r3, [r7, #12]
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <prvDeleteTCB+0x54>
	}
 8004562:	bf00      	nop
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <prvResetNextTaskUnblockTime+0x38>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d104      	bne.n	8004586 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <prvResetNextTaskUnblockTime+0x3c>)
 800457e:	f04f 32ff 	mov.w	r2, #4294967295
 8004582:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004584:	e008      	b.n	8004598 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004586:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <prvResetNextTaskUnblockTime+0x38>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	4a04      	ldr	r2, [pc, #16]	; (80045a8 <prvResetNextTaskUnblockTime+0x3c>)
 8004596:	6013      	str	r3, [r2, #0]
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	200003d8 	.word	0x200003d8
 80045a8:	20000440 	.word	0x20000440

080045ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045b2:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <xTaskGetSchedulerState+0x34>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d102      	bne.n	80045c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045ba:	2301      	movs	r3, #1
 80045bc:	607b      	str	r3, [r7, #4]
 80045be:	e008      	b.n	80045d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045c0:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <xTaskGetSchedulerState+0x38>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045c8:	2302      	movs	r3, #2
 80045ca:	607b      	str	r3, [r7, #4]
 80045cc:	e001      	b.n	80045d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045ce:	2300      	movs	r3, #0
 80045d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045d2:	687b      	ldr	r3, [r7, #4]
	}
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	2000042c 	.word	0x2000042c
 80045e4:	20000448 	.word	0x20000448

080045e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d05e      	beq.n	80046bc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004602:	4b31      	ldr	r3, [pc, #196]	; (80046c8 <xTaskPriorityInherit+0xe0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	429a      	cmp	r2, r3
 800460a:	d24e      	bcs.n	80046aa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	db06      	blt.n	8004622 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004614:	4b2c      	ldr	r3, [pc, #176]	; (80046c8 <xTaskPriorityInherit+0xe0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	f1c3 0207 	rsb	r2, r3, #7
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	6959      	ldr	r1, [r3, #20]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4a26      	ldr	r2, [pc, #152]	; (80046cc <xTaskPriorityInherit+0xe4>)
 8004634:	4413      	add	r3, r2
 8004636:	4299      	cmp	r1, r3
 8004638:	d12f      	bne.n	800469a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	3304      	adds	r3, #4
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe fc4a 	bl	8002ed8 <uxListRemove>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	2201      	movs	r2, #1
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	43da      	mvns	r2, r3
 8004656:	4b1e      	ldr	r3, [pc, #120]	; (80046d0 <xTaskPriorityInherit+0xe8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4013      	ands	r3, r2
 800465c:	4a1c      	ldr	r2, [pc, #112]	; (80046d0 <xTaskPriorityInherit+0xe8>)
 800465e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004660:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <xTaskPriorityInherit+0xe0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	2201      	movs	r2, #1
 8004670:	409a      	lsls	r2, r3
 8004672:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <xTaskPriorityInherit+0xe8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4313      	orrs	r3, r2
 8004678:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <xTaskPriorityInherit+0xe8>)
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4a10      	ldr	r2, [pc, #64]	; (80046cc <xTaskPriorityInherit+0xe4>)
 800468a:	441a      	add	r2, r3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	3304      	adds	r3, #4
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f7fe fbc3 	bl	8002e1e <vListInsertEnd>
 8004698:	e004      	b.n	80046a4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800469a:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <xTaskPriorityInherit+0xe0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80046a4:	2301      	movs	r3, #1
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e008      	b.n	80046bc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ae:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <xTaskPriorityInherit+0xe0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d201      	bcs.n	80046bc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80046b8:	2301      	movs	r3, #1
 80046ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046bc:	68fb      	ldr	r3, [r7, #12]
	}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000320 	.word	0x20000320
 80046cc:	20000324 	.word	0x20000324
 80046d0:	20000428 	.word	0x20000428

080046d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d06e      	beq.n	80047c8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046ea:	4b3a      	ldr	r3, [pc, #232]	; (80047d4 <xTaskPriorityDisinherit+0x100>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d00a      	beq.n	800470a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	60fb      	str	r3, [r7, #12]
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	60bb      	str	r3, [r7, #8]
}
 8004724:	bf00      	nop
 8004726:	e7fe      	b.n	8004726 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472c:	1e5a      	subs	r2, r3, #1
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	429a      	cmp	r2, r3
 800473c:	d044      	beq.n	80047c8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004742:	2b00      	cmp	r3, #0
 8004744:	d140      	bne.n	80047c8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	3304      	adds	r3, #4
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe fbc4 	bl	8002ed8 <uxListRemove>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d115      	bne.n	8004782 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475a:	491f      	ldr	r1, [pc, #124]	; (80047d8 <xTaskPriorityDisinherit+0x104>)
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <xTaskPriorityDisinherit+0xae>
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	2201      	movs	r2, #1
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43da      	mvns	r2, r3
 8004778:	4b18      	ldr	r3, [pc, #96]	; (80047dc <xTaskPriorityDisinherit+0x108>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4013      	ands	r3, r2
 800477e:	4a17      	ldr	r2, [pc, #92]	; (80047dc <xTaskPriorityDisinherit+0x108>)
 8004780:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	f1c3 0207 	rsb	r2, r3, #7
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	2201      	movs	r2, #1
 800479c:	409a      	lsls	r2, r3
 800479e:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <xTaskPriorityDisinherit+0x108>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <xTaskPriorityDisinherit+0x108>)
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <xTaskPriorityDisinherit+0x104>)
 80047b6:	441a      	add	r2, r3
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4619      	mov	r1, r3
 80047be:	4610      	mov	r0, r2
 80047c0:	f7fe fb2d 	bl	8002e1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047c4:	2301      	movs	r3, #1
 80047c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047c8:	697b      	ldr	r3, [r7, #20]
	}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000320 	.word	0x20000320
 80047d8:	20000324 	.word	0x20000324
 80047dc:	20000428 	.word	0x20000428

080047e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80047ee:	2301      	movs	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d077      	beq.n	80048e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	60fb      	str	r3, [r7, #12]
}
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d902      	bls.n	8004826 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	61fb      	str	r3, [r7, #28]
 8004824:	e002      	b.n	800482c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	429a      	cmp	r2, r3
 8004834:	d058      	beq.n	80048e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	429a      	cmp	r2, r3
 800483e:	d153      	bne.n	80048e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004840:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	429a      	cmp	r2, r3
 8004848:	d10a      	bne.n	8004860 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	60bb      	str	r3, [r7, #8]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	db04      	blt.n	800487e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f1c3 0207 	rsb	r2, r3, #7
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	6959      	ldr	r1, [r3, #20]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4a19      	ldr	r2, [pc, #100]	; (80048f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800488e:	4413      	add	r3, r2
 8004890:	4299      	cmp	r1, r3
 8004892:	d129      	bne.n	80048e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	3304      	adds	r3, #4
 8004898:	4618      	mov	r0, r3
 800489a:	f7fe fb1d 	bl	8002ed8 <uxListRemove>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	2201      	movs	r2, #1
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	43da      	mvns	r2, r3
 80048b0:	4b11      	ldr	r3, [pc, #68]	; (80048f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4013      	ands	r3, r2
 80048b6:	4a10      	ldr	r2, [pc, #64]	; (80048f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048b8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	2201      	movs	r2, #1
 80048c0:	409a      	lsls	r2, r3
 80048c2:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	4a0b      	ldr	r2, [pc, #44]	; (80048f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4a06      	ldr	r2, [pc, #24]	; (80048f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80048da:	441a      	add	r2, r3
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	3304      	adds	r3, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f7fe fa9b 	bl	8002e1e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048e8:	bf00      	nop
 80048ea:	3720      	adds	r7, #32
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20000320 	.word	0x20000320
 80048f4:	20000324 	.word	0x20000324
 80048f8:	20000428 	.word	0x20000428

080048fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <pvTaskIncrementMutexHeldCount+0x24>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d004      	beq.n	8004912 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <pvTaskIncrementMutexHeldCount+0x24>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800490e:	3201      	adds	r2, #1
 8004910:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004912:	4b03      	ldr	r3, [pc, #12]	; (8004920 <pvTaskIncrementMutexHeldCount+0x24>)
 8004914:	681b      	ldr	r3, [r3, #0]
	}
 8004916:	4618      	mov	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	20000320 	.word	0x20000320

08004924 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800492e:	4b29      	ldr	r3, [pc, #164]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004934:	4b28      	ldr	r3, [pc, #160]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3304      	adds	r3, #4
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe facc 	bl	8002ed8 <uxListRemove>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10b      	bne.n	800495e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004946:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	2201      	movs	r2, #1
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43da      	mvns	r2, r3
 8004954:	4b21      	ldr	r3, [pc, #132]	; (80049dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4013      	ands	r3, r2
 800495a:	4a20      	ldr	r2, [pc, #128]	; (80049dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800495c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d10a      	bne.n	800497c <prvAddCurrentTaskToDelayedList+0x58>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d007      	beq.n	800497c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800496c:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3304      	adds	r3, #4
 8004972:	4619      	mov	r1, r3
 8004974:	481a      	ldr	r0, [pc, #104]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004976:	f7fe fa52 	bl	8002e1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800497a:	e026      	b.n	80049ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4413      	add	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004984:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	429a      	cmp	r2, r3
 8004992:	d209      	bcs.n	80049a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004994:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3304      	adds	r3, #4
 800499e:	4619      	mov	r1, r3
 80049a0:	4610      	mov	r0, r2
 80049a2:	f7fe fa60 	bl	8002e66 <vListInsert>
}
 80049a6:	e010      	b.n	80049ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a8:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3304      	adds	r3, #4
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f7fe fa56 	bl	8002e66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d202      	bcs.n	80049ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80049c4:	4a09      	ldr	r2, [pc, #36]	; (80049ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6013      	str	r3, [r2, #0]
}
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000424 	.word	0x20000424
 80049d8:	20000320 	.word	0x20000320
 80049dc:	20000428 	.word	0x20000428
 80049e0:	2000040c 	.word	0x2000040c
 80049e4:	200003dc 	.word	0x200003dc
 80049e8:	200003d8 	.word	0x200003d8
 80049ec:	20000440 	.word	0x20000440

080049f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3b04      	subs	r3, #4
 8004a00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3b04      	subs	r3, #4
 8004a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f023 0201 	bic.w	r2, r3, #1
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3b04      	subs	r3, #4
 8004a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a20:	4a0c      	ldr	r2, [pc, #48]	; (8004a54 <pxPortInitialiseStack+0x64>)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3b14      	subs	r3, #20
 8004a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3b04      	subs	r3, #4
 8004a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f06f 0202 	mvn.w	r2, #2
 8004a3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3b20      	subs	r3, #32
 8004a44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a46:	68fb      	ldr	r3, [r7, #12]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	08004a59 	.word	0x08004a59

08004a58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a62:	4b12      	ldr	r3, [pc, #72]	; (8004aac <prvTaskExitError+0x54>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d00a      	beq.n	8004a82 <prvTaskExitError+0x2a>
	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	60fb      	str	r3, [r7, #12]
}
 8004a7e:	bf00      	nop
 8004a80:	e7fe      	b.n	8004a80 <prvTaskExitError+0x28>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	60bb      	str	r3, [r7, #8]
}
 8004a94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a96:	bf00      	nop
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0fc      	beq.n	8004a98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	2000000c 	.word	0x2000000c

08004ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ab0:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <pxCurrentTCBConst2>)
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	6808      	ldr	r0, [r1, #0]
 8004ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aba:	f380 8809 	msr	PSP, r0
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	f380 8811 	msr	BASEPRI, r0
 8004aca:	4770      	bx	lr
 8004acc:	f3af 8000 	nop.w

08004ad0 <pxCurrentTCBConst2>:
 8004ad0:	20000320 	.word	0x20000320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop

08004ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ad8:	4808      	ldr	r0, [pc, #32]	; (8004afc <prvPortStartFirstTask+0x24>)
 8004ada:	6800      	ldr	r0, [r0, #0]
 8004adc:	6800      	ldr	r0, [r0, #0]
 8004ade:	f380 8808 	msr	MSP, r0
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f380 8814 	msr	CONTROL, r0
 8004aea:	b662      	cpsie	i
 8004aec:	b661      	cpsie	f
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	df00      	svc	0
 8004af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004afa:	bf00      	nop
 8004afc:	e000ed08 	.word	0xe000ed08

08004b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b06:	4b46      	ldr	r3, [pc, #280]	; (8004c20 <xPortStartScheduler+0x120>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a46      	ldr	r2, [pc, #280]	; (8004c24 <xPortStartScheduler+0x124>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d10a      	bne.n	8004b26 <xPortStartScheduler+0x26>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	613b      	str	r3, [r7, #16]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b26:	4b3e      	ldr	r3, [pc, #248]	; (8004c20 <xPortStartScheduler+0x120>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a3f      	ldr	r2, [pc, #252]	; (8004c28 <xPortStartScheduler+0x128>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d10a      	bne.n	8004b46 <xPortStartScheduler+0x46>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	60fb      	str	r3, [r7, #12]
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b46:	4b39      	ldr	r3, [pc, #228]	; (8004c2c <xPortStartScheduler+0x12c>)
 8004b48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	22ff      	movs	r2, #255	; 0xff
 8004b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	4b31      	ldr	r3, [pc, #196]	; (8004c30 <xPortStartScheduler+0x130>)
 8004b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b6e:	4b31      	ldr	r3, [pc, #196]	; (8004c34 <xPortStartScheduler+0x134>)
 8004b70:	2207      	movs	r2, #7
 8004b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b74:	e009      	b.n	8004b8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b76:	4b2f      	ldr	r3, [pc, #188]	; (8004c34 <xPortStartScheduler+0x134>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	4a2d      	ldr	r2, [pc, #180]	; (8004c34 <xPortStartScheduler+0x134>)
 8004b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b92:	2b80      	cmp	r3, #128	; 0x80
 8004b94:	d0ef      	beq.n	8004b76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b96:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <xPortStartScheduler+0x134>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1c3 0307 	rsb	r3, r3, #7
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d00a      	beq.n	8004bb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	60bb      	str	r3, [r7, #8]
}
 8004bb4:	bf00      	nop
 8004bb6:	e7fe      	b.n	8004bb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bb8:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <xPortStartScheduler+0x134>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	4a1d      	ldr	r2, [pc, #116]	; (8004c34 <xPortStartScheduler+0x134>)
 8004bc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bc2:	4b1c      	ldr	r3, [pc, #112]	; (8004c34 <xPortStartScheduler+0x134>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bca:	4a1a      	ldr	r2, [pc, #104]	; (8004c34 <xPortStartScheduler+0x134>)
 8004bcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004bd6:	4b18      	ldr	r3, [pc, #96]	; (8004c38 <xPortStartScheduler+0x138>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a17      	ldr	r2, [pc, #92]	; (8004c38 <xPortStartScheduler+0x138>)
 8004bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004be2:	4b15      	ldr	r3, [pc, #84]	; (8004c38 <xPortStartScheduler+0x138>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a14      	ldr	r2, [pc, #80]	; (8004c38 <xPortStartScheduler+0x138>)
 8004be8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bee:	f000 f8dd 	bl	8004dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bf2:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <xPortStartScheduler+0x13c>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004bf8:	f000 f8fc 	bl	8004df4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004bfc:	4b10      	ldr	r3, [pc, #64]	; (8004c40 <xPortStartScheduler+0x140>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0f      	ldr	r2, [pc, #60]	; (8004c40 <xPortStartScheduler+0x140>)
 8004c02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c08:	f7ff ff66 	bl	8004ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c0c:	f7ff fa92 	bl	8004134 <vTaskSwitchContext>
	prvTaskExitError();
 8004c10:	f7ff ff22 	bl	8004a58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	e000ed00 	.word	0xe000ed00
 8004c24:	410fc271 	.word	0x410fc271
 8004c28:	410fc270 	.word	0x410fc270
 8004c2c:	e000e400 	.word	0xe000e400
 8004c30:	2000044c 	.word	0x2000044c
 8004c34:	20000450 	.word	0x20000450
 8004c38:	e000ed20 	.word	0xe000ed20
 8004c3c:	2000000c 	.word	0x2000000c
 8004c40:	e000ef34 	.word	0xe000ef34

08004c44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	607b      	str	r3, [r7, #4]
}
 8004c5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c5e:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <vPortEnterCritical+0x58>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	4a0d      	ldr	r2, [pc, #52]	; (8004c9c <vPortEnterCritical+0x58>)
 8004c66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c68:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <vPortEnterCritical+0x58>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d10f      	bne.n	8004c90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <vPortEnterCritical+0x5c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	603b      	str	r3, [r7, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <vPortEnterCritical+0x4a>
	}
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	2000000c 	.word	0x2000000c
 8004ca0:	e000ed04 	.word	0xe000ed04

08004ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <vPortExitCritical+0x50>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <vPortExitCritical+0x24>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	607b      	str	r3, [r7, #4]
}
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <vPortExitCritical+0x50>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	4a09      	ldr	r2, [pc, #36]	; (8004cf4 <vPortExitCritical+0x50>)
 8004cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004cd2:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <vPortExitCritical+0x50>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d105      	bne.n	8004ce6 <vPortExitCritical+0x42>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	f383 8811 	msr	BASEPRI, r3
}
 8004ce4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	2000000c 	.word	0x2000000c
	...

08004d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d00:	f3ef 8009 	mrs	r0, PSP
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <pxCurrentTCBConst>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	f01e 0f10 	tst.w	lr, #16
 8004d10:	bf08      	it	eq
 8004d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1a:	6010      	str	r0, [r2, #0]
 8004d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d24:	f380 8811 	msr	BASEPRI, r0
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f7ff fa00 	bl	8004134 <vTaskSwitchContext>
 8004d34:	f04f 0000 	mov.w	r0, #0
 8004d38:	f380 8811 	msr	BASEPRI, r0
 8004d3c:	bc09      	pop	{r0, r3}
 8004d3e:	6819      	ldr	r1, [r3, #0]
 8004d40:	6808      	ldr	r0, [r1, #0]
 8004d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d46:	f01e 0f10 	tst.w	lr, #16
 8004d4a:	bf08      	it	eq
 8004d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d50:	f380 8809 	msr	PSP, r0
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	f3af 8000 	nop.w

08004d60 <pxCurrentTCBConst>:
 8004d60:	20000320 	.word	0x20000320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop

08004d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	607b      	str	r3, [r7, #4]
}
 8004d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d82:	f7ff f91f 	bl	8003fc4 <xTaskIncrementTick>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d8c:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <SysTick_Handler+0x40>)
 8004d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	2300      	movs	r3, #0
 8004d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	f383 8811 	msr	BASEPRI, r3
}
 8004d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004da0:	bf00      	nop
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <vPortSetupTimerInterrupt+0x34>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <vPortSetupTimerInterrupt+0x38>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <vPortSetupTimerInterrupt+0x3c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a0a      	ldr	r2, [pc, #40]	; (8004dec <vPortSetupTimerInterrupt+0x40>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	099b      	lsrs	r3, r3, #6
 8004dc8:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <vPortSetupTimerInterrupt+0x44>)
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dce:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <vPortSetupTimerInterrupt+0x34>)
 8004dd0:	2207      	movs	r2, #7
 8004dd2:	601a      	str	r2, [r3, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	e000e010 	.word	0xe000e010
 8004de4:	e000e018 	.word	0xe000e018
 8004de8:	20000000 	.word	0x20000000
 8004dec:	10624dd3 	.word	0x10624dd3
 8004df0:	e000e014 	.word	0xe000e014

08004df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004df4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e04 <vPortEnableVFP+0x10>
 8004df8:	6801      	ldr	r1, [r0, #0]
 8004dfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004dfe:	6001      	str	r1, [r0, #0]
 8004e00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e02:	bf00      	nop
 8004e04:	e000ed88 	.word	0xe000ed88

08004e08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e0e:	f3ef 8305 	mrs	r3, IPSR
 8004e12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b0f      	cmp	r3, #15
 8004e18:	d914      	bls.n	8004e44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e1a:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <vPortValidateInterruptPriority+0x70>)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e24:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <vPortValidateInterruptPriority+0x74>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	7afa      	ldrb	r2, [r7, #11]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d20a      	bcs.n	8004e44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	607b      	str	r3, [r7, #4]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e44:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <vPortValidateInterruptPriority+0x78>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <vPortValidateInterruptPriority+0x7c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d90a      	bls.n	8004e6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	603b      	str	r3, [r7, #0]
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <vPortValidateInterruptPriority+0x60>
	}
 8004e6a:	bf00      	nop
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	e000e3f0 	.word	0xe000e3f0
 8004e7c:	2000044c 	.word	0x2000044c
 8004e80:	e000ed0c 	.word	0xe000ed0c
 8004e84:	20000450 	.word	0x20000450

08004e88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	; 0x28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e94:	f7fe ffec 	bl	8003e70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e98:	4b5b      	ldr	r3, [pc, #364]	; (8005008 <pvPortMalloc+0x180>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ea0:	f000 f920 	bl	80050e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ea4:	4b59      	ldr	r3, [pc, #356]	; (800500c <pvPortMalloc+0x184>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f040 8093 	bne.w	8004fd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01d      	beq.n	8004ef4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004eb8:	2208      	movs	r2, #8
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d014      	beq.n	8004ef4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f023 0307 	bic.w	r3, r3, #7
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <pvPortMalloc+0x6c>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	617b      	str	r3, [r7, #20]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d06e      	beq.n	8004fd8 <pvPortMalloc+0x150>
 8004efa:	4b45      	ldr	r3, [pc, #276]	; (8005010 <pvPortMalloc+0x188>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d869      	bhi.n	8004fd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f04:	4b43      	ldr	r3, [pc, #268]	; (8005014 <pvPortMalloc+0x18c>)
 8004f06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f08:	4b42      	ldr	r3, [pc, #264]	; (8005014 <pvPortMalloc+0x18c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f0e:	e004      	b.n	8004f1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d903      	bls.n	8004f2c <pvPortMalloc+0xa4>
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f1      	bne.n	8004f10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f2c:	4b36      	ldr	r3, [pc, #216]	; (8005008 <pvPortMalloc+0x180>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d050      	beq.n	8004fd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2208      	movs	r2, #8
 8004f3c:	4413      	add	r3, r2
 8004f3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	1ad2      	subs	r2, r2, r3
 8004f50:	2308      	movs	r3, #8
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d91f      	bls.n	8004f98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <pvPortMalloc+0xf8>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	613b      	str	r3, [r7, #16]
}
 8004f7c:	bf00      	nop
 8004f7e:	e7fe      	b.n	8004f7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	1ad2      	subs	r2, r2, r3
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f92:	69b8      	ldr	r0, [r7, #24]
 8004f94:	f000 f908 	bl	80051a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f98:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <pvPortMalloc+0x188>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	4a1b      	ldr	r2, [pc, #108]	; (8005010 <pvPortMalloc+0x188>)
 8004fa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fa6:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <pvPortMalloc+0x188>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <pvPortMalloc+0x190>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d203      	bcs.n	8004fba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fb2:	4b17      	ldr	r3, [pc, #92]	; (8005010 <pvPortMalloc+0x188>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a18      	ldr	r2, [pc, #96]	; (8005018 <pvPortMalloc+0x190>)
 8004fb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	4b13      	ldr	r3, [pc, #76]	; (800500c <pvPortMalloc+0x184>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <pvPortMalloc+0x194>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	4a11      	ldr	r2, [pc, #68]	; (800501c <pvPortMalloc+0x194>)
 8004fd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fd8:	f7fe ff58 	bl	8003e8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <pvPortMalloc+0x174>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	60fb      	str	r3, [r7, #12]
}
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <pvPortMalloc+0x172>
	return pvReturn;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3728      	adds	r7, #40	; 0x28
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	2000405c 	.word	0x2000405c
 800500c:	20004070 	.word	0x20004070
 8005010:	20004060 	.word	0x20004060
 8005014:	20004054 	.word	0x20004054
 8005018:	20004064 	.word	0x20004064
 800501c:	20004068 	.word	0x20004068

08005020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d04d      	beq.n	80050ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005032:	2308      	movs	r3, #8
 8005034:	425b      	negs	r3, r3
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4413      	add	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <vPortFree+0xb8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4013      	ands	r3, r2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <vPortFree+0x44>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	60fb      	str	r3, [r7, #12]
}
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <vPortFree+0x62>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	60bb      	str	r3, [r7, #8]
}
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <vPortFree+0xb8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01e      	beq.n	80050ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d11a      	bne.n	80050ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <vPortFree+0xb8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	43db      	mvns	r3, r3
 80050a2:	401a      	ands	r2, r3
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050a8:	f7fe fee2 	bl	8003e70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <vPortFree+0xbc>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4413      	add	r3, r2
 80050b6:	4a09      	ldr	r2, [pc, #36]	; (80050dc <vPortFree+0xbc>)
 80050b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050ba:	6938      	ldr	r0, [r7, #16]
 80050bc:	f000 f874 	bl	80051a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <vPortFree+0xc0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	4a06      	ldr	r2, [pc, #24]	; (80050e0 <vPortFree+0xc0>)
 80050c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80050ca:	f7fe fedf 	bl	8003e8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050ce:	bf00      	nop
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20004070 	.word	0x20004070
 80050dc:	20004060 	.word	0x20004060
 80050e0:	2000406c 	.word	0x2000406c

080050e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80050ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050f0:	4b27      	ldr	r3, [pc, #156]	; (8005190 <prvHeapInit+0xac>)
 80050f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00c      	beq.n	8005118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3307      	adds	r3, #7
 8005102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0307 	bic.w	r3, r3, #7
 800510a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	4a1f      	ldr	r2, [pc, #124]	; (8005190 <prvHeapInit+0xac>)
 8005114:	4413      	add	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800511c:	4a1d      	ldr	r2, [pc, #116]	; (8005194 <prvHeapInit+0xb0>)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005122:	4b1c      	ldr	r3, [pc, #112]	; (8005194 <prvHeapInit+0xb0>)
 8005124:	2200      	movs	r2, #0
 8005126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	4413      	add	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005130:	2208      	movs	r2, #8
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0307 	bic.w	r3, r3, #7
 800513e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4a15      	ldr	r2, [pc, #84]	; (8005198 <prvHeapInit+0xb4>)
 8005144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005146:	4b14      	ldr	r3, [pc, #80]	; (8005198 <prvHeapInit+0xb4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2200      	movs	r2, #0
 800514c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800514e:	4b12      	ldr	r3, [pc, #72]	; (8005198 <prvHeapInit+0xb4>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	1ad2      	subs	r2, r2, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005164:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <prvHeapInit+0xb4>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a0a      	ldr	r2, [pc, #40]	; (800519c <prvHeapInit+0xb8>)
 8005172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <prvHeapInit+0xbc>)
 800517a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800517c:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <prvHeapInit+0xc0>)
 800517e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005182:	601a      	str	r2, [r3, #0]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	20000454 	.word	0x20000454
 8005194:	20004054 	.word	0x20004054
 8005198:	2000405c 	.word	0x2000405c
 800519c:	20004064 	.word	0x20004064
 80051a0:	20004060 	.word	0x20004060
 80051a4:	20004070 	.word	0x20004070

080051a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051b0:	4b28      	ldr	r3, [pc, #160]	; (8005254 <prvInsertBlockIntoFreeList+0xac>)
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	e002      	b.n	80051bc <prvInsertBlockIntoFreeList+0x14>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d8f7      	bhi.n	80051b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	4413      	add	r3, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d108      	bne.n	80051ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	441a      	add	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	441a      	add	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d118      	bne.n	8005230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4b15      	ldr	r3, [pc, #84]	; (8005258 <prvInsertBlockIntoFreeList+0xb0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d00d      	beq.n	8005226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	441a      	add	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e008      	b.n	8005238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005226:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <prvInsertBlockIntoFreeList+0xb0>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e003      	b.n	8005238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	429a      	cmp	r2, r3
 800523e:	d002      	beq.n	8005246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	20004054 	.word	0x20004054
 8005258:	2000405c 	.word	0x2000405c

0800525c <__libc_init_array>:
 800525c:	b570      	push	{r4, r5, r6, lr}
 800525e:	4d0d      	ldr	r5, [pc, #52]	; (8005294 <__libc_init_array+0x38>)
 8005260:	4c0d      	ldr	r4, [pc, #52]	; (8005298 <__libc_init_array+0x3c>)
 8005262:	1b64      	subs	r4, r4, r5
 8005264:	10a4      	asrs	r4, r4, #2
 8005266:	2600      	movs	r6, #0
 8005268:	42a6      	cmp	r6, r4
 800526a:	d109      	bne.n	8005280 <__libc_init_array+0x24>
 800526c:	4d0b      	ldr	r5, [pc, #44]	; (800529c <__libc_init_array+0x40>)
 800526e:	4c0c      	ldr	r4, [pc, #48]	; (80052a0 <__libc_init_array+0x44>)
 8005270:	f000 f82e 	bl	80052d0 <_init>
 8005274:	1b64      	subs	r4, r4, r5
 8005276:	10a4      	asrs	r4, r4, #2
 8005278:	2600      	movs	r6, #0
 800527a:	42a6      	cmp	r6, r4
 800527c:	d105      	bne.n	800528a <__libc_init_array+0x2e>
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	f855 3b04 	ldr.w	r3, [r5], #4
 8005284:	4798      	blx	r3
 8005286:	3601      	adds	r6, #1
 8005288:	e7ee      	b.n	8005268 <__libc_init_array+0xc>
 800528a:	f855 3b04 	ldr.w	r3, [r5], #4
 800528e:	4798      	blx	r3
 8005290:	3601      	adds	r6, #1
 8005292:	e7f2      	b.n	800527a <__libc_init_array+0x1e>
 8005294:	08005494 	.word	0x08005494
 8005298:	08005494 	.word	0x08005494
 800529c:	08005494 	.word	0x08005494
 80052a0:	08005498 	.word	0x08005498

080052a4 <memcpy>:
 80052a4:	440a      	add	r2, r1
 80052a6:	4291      	cmp	r1, r2
 80052a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80052ac:	d100      	bne.n	80052b0 <memcpy+0xc>
 80052ae:	4770      	bx	lr
 80052b0:	b510      	push	{r4, lr}
 80052b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052ba:	4291      	cmp	r1, r2
 80052bc:	d1f9      	bne.n	80052b2 <memcpy+0xe>
 80052be:	bd10      	pop	{r4, pc}

080052c0 <memset>:
 80052c0:	4402      	add	r2, r0
 80052c2:	4603      	mov	r3, r0
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d100      	bne.n	80052ca <memset+0xa>
 80052c8:	4770      	bx	lr
 80052ca:	f803 1b01 	strb.w	r1, [r3], #1
 80052ce:	e7f9      	b.n	80052c4 <memset+0x4>

080052d0 <_init>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	bf00      	nop
 80052d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d6:	bc08      	pop	{r3}
 80052d8:	469e      	mov	lr, r3
 80052da:	4770      	bx	lr

080052dc <_fini>:
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	bf00      	nop
 80052e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e2:	bc08      	pop	{r3}
 80052e4:	469e      	mov	lr, r3
 80052e6:	4770      	bx	lr
